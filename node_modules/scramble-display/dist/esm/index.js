var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};

// src/scramble-display/ScrambleDisplay.ts
import { Alg } from "cubing/alg";
import { eventInfo } from "cubing/puzzles";
import { TwistyPlayer } from "cubing/twisty";

// src/scramble-display/css.ts
var mainStyleText = `
:host {
  width: 384px;
  height: 256px;
  display: grid;
}

.wrapper {
  width: 100%;
  height: 100%;
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: 1fr;
  place-content: center;
  overflow: hidden;
}

.wrapper > * {
  width: inherit;
  height: inherit;
  overflow: hidden;
}

twisty-player {
  width: 100%;
  height: 100%;
}
`;

// src/scramble-display/ScrambleDisplay.ts
var CUBE_333 = "333";
var DEFAULT_EVENT = CUBE_333;
var _shadow, _wrapper, _currentAttributes, _twistyPlayer;
var ScrambleDisplay = class extends HTMLElement {
  constructor() {
    super();
    __privateAdd(this, _shadow, void 0);
    __privateAdd(this, _wrapper, document.createElement("div"));
    __privateAdd(this, _currentAttributes, {
      eventID: null,
      scramble: new Alg(),
      visualization: null,
      checkered: false
    });
    __privateAdd(this, _twistyPlayer, new TwistyPlayer({
      controlPanel: "none",
      hintFacelets: "none",
      visualization: "2D",
      background: "none"
    }));
    __privateSet(this, _shadow, this.attachShadow({ mode: "closed" }));
    __privateGet(this, _wrapper).classList.add("wrapper");
    __privateGet(this, _shadow).appendChild(__privateGet(this, _wrapper));
    const style = document.createElement("style");
    style.textContent = mainStyleText;
    __privateGet(this, _shadow).appendChild(style);
  }
  get player() {
    return __privateGet(this, _twistyPlayer);
  }
  connectedCallback() {
    __privateGet(this, _wrapper).appendChild(__privateGet(this, _twistyPlayer));
  }
  set event(eventID) {
    var _a;
    const info = eventInfo(eventID != null ? eventID : DEFAULT_EVENT);
    __privateGet(this, _twistyPlayer).puzzle = (_a = info == null ? void 0 : info.puzzleID) != null ? _a : "3x3x3";
    __privateGet(this, _currentAttributes).eventID = eventID;
  }
  get event() {
    return __privateGet(this, _currentAttributes).eventID;
  }
  set scramble(scramble) {
    const alg = new Alg(scramble != null ? scramble : "");
    __privateGet(this, _twistyPlayer).alg = alg;
    __privateGet(this, _currentAttributes).scramble = alg;
    __privateGet(this, _wrapper).setAttribute("title", alg.toString());
  }
  get scramble() {
    return __privateGet(this, _currentAttributes).scramble;
  }
  set visualization(visualization) {
    __privateGet(this, _twistyPlayer).visualization = visualization != null ? visualization : "2D";
    __privateGet(this, _currentAttributes).visualization = visualization;
  }
  get visualization() {
    return __privateGet(this, _currentAttributes).visualization;
  }
  set checkered(checkered) {
    const checkeredBoolean = !!checkered;
    __privateGet(this, _twistyPlayer).background = checkeredBoolean ? "checkered" : "none";
    __privateGet(this, _currentAttributes).checkered = checkeredBoolean;
  }
  get checkered() {
    return __privateGet(this, _currentAttributes).checkered;
  }
  attributeChangedCallback(name, oldValue, newValue) {
    switch (name) {
      case "event": {
        this.event = newValue;
        break;
      }
      case "scramble": {
        this.scramble = newValue;
        break;
      }
      case "visualization": {
        this.visualization = newValue;
        break;
      }
      case "checkered": {
        this.checkered = newValue !== null;
        break;
      }
    }
  }
  static get observedAttributes() {
    return ["event", "scramble", "visualization", "checkered"];
  }
};
_shadow = new WeakMap();
_wrapper = new WeakMap();
_currentAttributes = new WeakMap();
_twistyPlayer = new WeakMap();
customElements.define("scramble-display", ScrambleDisplay);
export {
  ScrambleDisplay
};
