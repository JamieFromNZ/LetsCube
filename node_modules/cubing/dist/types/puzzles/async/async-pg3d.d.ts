import { KPuzzle } from "../../kpuzzle";
import type { PuzzleGeometry } from "../../puzzle-geometry";
import type { ExperimentalStickering } from "../../twisty";
import type { PuzzleLoader } from "../PuzzleLoader";
import type { PuzzleAppearance } from "../stickerings/appearance";
import { cubeStickerings } from "../stickerings/cube-stickerings";
export declare function asyncGetPuzzleGeometry(puzzleName: string): Promise<PuzzleGeometry>;
export declare function asyncGetKPuzzle(pgPromise: Promise<PuzzleGeometry>, puzzleName: string): Promise<KPuzzle>;
export declare function asyncLazyKPuzzleGetter(pgPromise: Promise<PuzzleGeometry>, puzzleName: string): () => Promise<KPuzzle>;
declare type PuzzleLoaderConstructorArgs = {
    pgID?: string;
    id: string;
    fullName: string;
    inventedBy?: string[];
    inventionYear?: number;
};
export declare class PGPuzzleLoader implements PuzzleLoader {
    #private;
    pgId?: string;
    id: string;
    fullName: string;
    inventedBy?: string[];
    inventionYear?: number;
    constructor(info: PuzzleLoaderConstructorArgs);
    pg(): Promise<PuzzleGeometry>;
    kpuzzle(): Promise<KPuzzle>;
    svg(): Promise<string>;
}
export declare class CubePGPuzzleLoader extends PGPuzzleLoader {
    appearance(stickering: ExperimentalStickering): Promise<PuzzleAppearance>;
    stickerings: typeof cubeStickerings;
}
export {};
