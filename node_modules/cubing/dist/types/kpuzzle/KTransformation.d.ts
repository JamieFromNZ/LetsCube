import type { Alg, Move } from "../alg";
import type { KPuzzle, KTransformationSource } from "./KPuzzle";
import type { KTransformationData } from "./KPuzzleDefinition";
import { KState } from "./KState";
export declare class KTransformation {
    #private;
    readonly kpuzzle: KPuzzle;
    readonly transformationData: KTransformationData;
    constructor(kpuzzle: KPuzzle, transformationData: KTransformationData);
    toJSON(): any;
    invert(): KTransformation;
    isIdentityTransformation(): boolean;
    /** @deprecated */
    static experimentalConstructIdentity(kpuzzle: KPuzzle): KTransformation;
    isIdentical(t2: KTransformation): boolean;
    /** @deprecated */
    apply(source: KTransformationSource): KTransformation;
    applyTransformation(t2: KTransformation): KTransformation;
    applyMove(move: Move | string): KTransformation;
    applyAlg(alg: Alg | string): KTransformation;
    toKState(): KState;
    repetitionOrder(): number;
    selfMultiply(amount: number): KTransformation;
}
