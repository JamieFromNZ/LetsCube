import { Alg, Move } from "../alg";
import type { PGNotation } from "../puzzle-geometry/PuzzleGeometry";
import type { KPuzzleDefinition } from "./KPuzzleDefinition";
import { KState } from "./KState";
import { KTransformation } from "./KTransformation";
export declare type KTransformationSource = Alg | Move | string | KTransformation;
export declare class KPuzzle {
    #private;
    readonly definition: KPuzzleDefinition;
    private experimentalPGNotation;
    constructor(definition: KPuzzleDefinition, options?: {
        experimentalPGNotation?: PGNotation;
    });
    name(): string;
    identityTransformation(): KTransformation;
    moveToTransformation(move: Move | string): KTransformation;
    algToTransformation(alg: Alg | string): KTransformation;
    /** @deprecated */
    toTransformation(source: KTransformationSource): KTransformation;
    startState(): KState;
    canConvertStateToUniqueTransformation(): boolean;
    /** @deprecated */
    get state(): never;
    /** @deprecated */
    reset(): never;
    /** @deprecated */
    applyMove(_move: Move): never;
    /** @deprecated */
    applyAlg(_alg: Alg): never;
}
