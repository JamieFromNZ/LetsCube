/// <reference types="web-bluetooth" />
import type { Move } from "../../alg";
import type { KState } from "../../kpuzzle/KState";
import { StreamTransformer } from "../transformer";
/******** BluetoothPuzzle ********/
export interface MoveEvent {
    latestMove: Move;
    timeStamp: number;
    debug?: Record<string, unknown>;
    state?: KState;
    quaternion?: any;
}
export interface OrientationEvent {
    quaternion: {
        x: number;
        y: number;
        z: number;
        w: number;
    };
    timeStamp: number;
    debug?: Record<string, unknown>;
}
export interface BluetoothConfig<T> {
    connect: (server: BluetoothRemoteGATTServer, device?: BluetoothDevice) => Promise<T>;
    prefixes: string[];
    filters: BluetoothLEScanFilter[];
    optionalServices: BluetoothServiceUUID[];
}
export declare abstract class BluetoothPuzzle extends EventTarget {
    transformers: StreamTransformer[];
    protected listeners: Array<(e: MoveEvent) => void>;
    protected orientationListeners: Array<(e: OrientationEvent) => void>;
    abstract name(): string | undefined;
    abstract disconnect(): void;
    getState(): Promise<KState>;
    addMoveListener(listener: (e: MoveEvent) => void): void;
    addOrientationListener(listener: (e: OrientationEvent) => void): void;
    experimentalAddBasicRotationTransformer(): void;
    protected dispatchMove(moveEvent: MoveEvent): void;
    protected dispatchOrientation(orientationEvent: OrientationEvent): void;
}
