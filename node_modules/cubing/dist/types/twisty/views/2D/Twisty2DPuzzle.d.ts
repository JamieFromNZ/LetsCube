import type { PuzzleLoader } from "../../../puzzles/PuzzleLoader";
import { PositionListener, PuzzlePosition } from "../../controllers/AnimationTypes";
import { ManagedCustomElement } from "../ManagedCustomElement";
import type { TwistyPlayerModel } from "../../model/TwistyPlayerModel";
import type { ExperimentalStickering } from "../..";
import type { KPuzzle } from "../../../kpuzzle";
import { KPuzzleSVGWrapper } from "./KPuzzleSVGWrapper";
export interface Twisty2DPuzzleOptions {
    experimentalStickering?: ExperimentalStickering;
}
export declare class Twisty2DPuzzle extends ManagedCustomElement implements PositionListener {
    #private;
    private model?;
    private kpuzzle?;
    private svgSource?;
    private options?;
    private puzzleLoader?;
    svg: KPuzzleSVGWrapper;
    private scheduler;
    constructor(model?: TwistyPlayerModel | undefined, kpuzzle?: KPuzzle | undefined, svgSource?: string | undefined, options?: Twisty2DPuzzleOptions | undefined, puzzleLoader?: PuzzleLoader | undefined);
    disconnect(): void;
    onPositionChange(position: PuzzlePosition): void;
    scheduleRender(): void;
    experimentalSetStickering(stickering: ExperimentalStickering): void;
    private resetSVG;
    private render;
}
