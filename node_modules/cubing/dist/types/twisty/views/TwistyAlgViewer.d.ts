import { Alg, ExperimentalIterationDirection, Move, Unit } from "../../alg";
import type { Parsed } from "../../alg/parse";
import { ManagedCustomElement } from "./ManagedCustomElement";
import { HTMLElementShim } from "./node-custom-element-shims";
import { TwistyPlayer } from "./TwistyPlayer";
declare class DataDown {
    earliestMoveIndex: number;
    twistyAlgViewer: TwistyAlgViewer;
    direction: ExperimentalIterationDirection;
}
declare class DataUp {
    moveCount: number;
    element: TwistyAlgWrapperElem | TwistyAlgLeafElem;
}
declare class TwistyAlgLeafElem extends ManagedCustomElement {
    algOrUnit: Alg | Unit;
    constructor(className: string, text: string, dataDown: DataDown, algOrUnit: Alg | Unit, offsetIntoMove: boolean, clickable: boolean);
    pathToIndex(_index: number): (TwistyAlgWrapperElem | TwistyAlgLeafElem)[];
    setCurrentMove(current: boolean): void;
}
declare class TwistyAlgWrapperElem extends HTMLElementShim {
    algOrUnit: Alg | Unit;
    private queue;
    constructor(className: string, algOrUnit: Alg | Unit);
    addString(str: string): void;
    addElem(dataUp: DataUp): number;
    flushQueue(direction?: ExperimentalIterationDirection): void;
    pathToIndex(_index: number): (TwistyAlgWrapperElem | TwistyAlgLeafElem)[];
}
declare class MoveHighlighter {
    moveCharIndexMap: Map<number, TwistyAlgLeafElem>;
    currentElem: TwistyAlgLeafElem | null;
    addMove(charIndex: number, elem: TwistyAlgLeafElem): void;
    set(move: Parsed<Move> | null): void;
}
export declare class TwistyAlgViewer extends HTMLElementShim {
    #private;
    highlighter: MoveHighlighter;
    lastClickTimestamp: number | null;
    constructor(options?: {
        twistyPlayer?: TwistyPlayer;
    });
    protected connectedCallback(): void;
    private setAlg;
    get twistyPlayer(): TwistyPlayer | null;
    set twistyPlayer(twistyPlayer: TwistyPlayer | null);
    jumpToIndex(index: number, offsetIntoMove: boolean): Promise<void>;
    protected attributeChangedCallback(attributeName: string, _oldValue: string, newValue: string): Promise<void>;
    static get observedAttributes(): string[];
}
export {};
