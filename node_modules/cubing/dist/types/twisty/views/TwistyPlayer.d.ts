import type { ExperimentalStickering } from "..";
import type { Alg, Move } from "../../alg";
import type { PuzzleDescriptionString } from "../../puzzle-geometry/PGPuzzles";
import type { TwistyAnimationControllerDelegate } from "../controllers/TwistyAnimationController";
import { TwistyPlayerController } from "../controllers/TwistyPlayerController";
import type { HintFaceletStyleWithAuto } from "../model/props/puzzle/display/HintFaceletProp";
import type { MovePressInput } from "../model/props/puzzle/state/MovePressInputProp";
import type { SetupToLocation } from "../model/props/puzzle/state/SetupAnchorProp";
import type { PuzzleID } from "../model/props/puzzle/structure/PuzzleIDRequestProp";
import type { BackViewLayoutWithAuto } from "../model/props/viewer/BackViewProp";
import { ControlPanelThemeWithAuto } from "../model/props/viewer/ControlPanelProp";
import type { ViewerLinkPageWithAuto } from "../model/props/viewer/ViewerLinkProp";
import type { VisualizationFormatWithAuto } from "../model/props/viewer/VisualizationProp";
import type { PG3D } from "./3D/puzzles/PG3D";
import { TwistyButtons } from "./control-panel/TwistyButtons";
import { TwistyPlayerSettable } from "./TwistyPlayerSettable";
export declare const twistyPlayerAttributeMap: {
    alg: string;
    "experimental-setup-alg": string;
    "experimental-setup-anchor": string;
    puzzle: string;
    "experimental-puzzle-description": string;
    visualization: string;
    "hint-facelets": string;
    "experimental-stickering": string;
    background: string;
    "control-panel": string;
    "back-view": string;
    "viewer-link": string;
    "experimental-move-press-input": string;
    "experimental-title": string;
    "experimental-video-url": string;
    "experimental-competition-id": string;
    "camera-latitude": string;
    "camera-longitude": string;
    "camera-distance": string;
    "camera-latitude-limit": string;
    "tempo-scale": string;
    "experimental-sprite": string;
    "experimental-hint-sprite": string;
};
export declare type TwistyPlayerAttribute = keyof typeof twistyPlayerAttributeMap;
export interface TwistyPlayerConfig {
    alg?: Alg | string;
    experimentalSetupAlg?: Alg | string;
    experimentalSetupAnchor?: SetupToLocation;
    puzzle?: PuzzleID;
    experimentalPuzzleDescription?: PuzzleDescriptionString;
    visualization?: VisualizationFormatWithAuto;
    hintFacelets?: HintFaceletStyleWithAuto;
    experimentalStickering?: ExperimentalStickering;
    background?: BackViewLayoutWithAuto;
    controlPanel?: ControlPanelThemeWithAuto;
    backView?: BackViewLayoutWithAuto;
    viewerLink?: ViewerLinkPageWithAuto;
    experimentalMovePressInput?: MovePressInput;
    experimentalTitle?: string;
    experimentalVideoURL?: string;
    experimentalCompetitionID?: string;
    cameraLatitude?: number;
    cameraLongitude?: number;
    cameraDistance?: number;
    cameraLatitudeLimit?: number;
    tempoScale?: number;
    experimentalSprite?: string | null;
    experimentalHintSprite?: string | null;
}
/**
 * TwistyPlayer is the heart of `cubing.js`. It can be used to display a puzzle on a web page like this:
 *
 *     <script src="path/to/cubing/twisty" type="module"></script>
 *     <twisty-player alg="R U R'"></twisty-player>
 *
 * You can also construct it directly in JavaScript:
 *
 *     import { TwistyPlayer } from "cubing/twisty";
 *     const twistyPlayer = new TwistyPlayer({alg: "R U R'"});
 *     // Once the page has loaded, you can do this:
 *     document.body.appendChild(twistyPlayer);
 *
 * See {@link https://js.cubing.net/cubing/} for more examples.
 */
export declare class TwistyPlayer extends TwistyPlayerSettable implements TwistyAnimationControllerDelegate {
    #private;
    controller: TwistyPlayerController;
    buttons: TwistyButtons;
    experimentalCanvasClickCallback: (...args: any) => void;
    constructor(config?: TwistyPlayerConfig);
    connectedCallback(): Promise<void>;
    flash(): void;
    experimentalCurrentCanvases(): Promise<HTMLCanvasElement[]>;
    experimentalPG3D(): Promise<PG3D | null>;
    jumpToStart(options?: {
        flash: boolean;
    }): void;
    jumpToEnd(options?: {
        flash: boolean;
    }): void;
    play(): void;
    pause(): void;
    togglePlay(play?: boolean): void;
    experimentalAddMove(flexibleMove: Move | string, options?: {
        coalesce?: boolean;
    }): void;
    static get observedAttributes(): string[];
    attributeChangedCallback(attributeName: string, _oldValue: string, newValue: string): void;
    experimentalScreenshot(options?: {
        width: number;
        height: number;
    }): Promise<string>;
    experimentalDownloadScreenshot(filename?: string): Promise<void>;
}
