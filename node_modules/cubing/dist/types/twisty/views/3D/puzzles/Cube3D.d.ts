import { Mesh, Object3D, Texture } from "three";
import type { ExperimentalStickering } from "../../..";
import type { KPuzzle } from "../../../../kpuzzle";
import type { PuzzleAppearance } from "../../../../puzzles/stickerings/appearance";
import type { PuzzlePosition } from "../../../controllers/AnimationTypes";
import { HintFaceletStyle } from "../../../model/props/puzzle/display/HintFaceletProp";
import type { Twisty3DPuzzle } from "./Twisty3DPuzzle";
/** @deprecated */
export declare function experimentalSetDefaultStickerElevation(stickerElevation: number): void;
export interface Cube3DOptions {
    showMainStickers?: boolean;
    hintFacelets?: HintFaceletStyle;
    showFoundation?: boolean;
    experimentalStickering?: ExperimentalStickering;
    foundationSprite?: Texture | null;
    hintSprite?: Texture | null;
}
interface FaceletInfo {
    faceIdx: number;
    facelet: Mesh;
    hintFacelet?: Mesh;
}
export declare class Cube3D extends Object3D implements Twisty3DPuzzle {
    private kpuzzle;
    private scheduleRenderCallback?;
    kpuzzleFaceletInfo: Record<string, FaceletInfo[][]>;
    private pieces;
    private options;
    private experimentalHintStickerMeshes;
    private experimentalFoundationMeshes;
    private setSpriteURL;
    private sprite;
    setSprite(texture: Texture): void;
    private setHintSpriteURL;
    private hintSprite;
    setHintSprite(texture: Texture): void;
    constructor(kpuzzle: KPuzzle, scheduleRenderCallback?: (() => void) | undefined, options?: Cube3DOptions);
    /** @deprecated */
    experimentalSetStickerSpriteURL(stickerSpriteURL: string): void;
    /** @deprecated */
    experimentalSetHintStickerSpriteURL(hintStickerSpriteURL: string): void;
    setStickering(stickering: ExperimentalStickering): void;
    setAppearance(appearance: PuzzleAppearance): void;
    /** @deprecated */
    experimentalUpdateOptions(options: Cube3DOptions): void;
    onPositionChange(p: PuzzlePosition): void;
    private createCubie;
    private createCubieFoundation;
    private createSticker;
    /** @deprecated */
    experimentalSetFoundationOpacity(opacity: number): void;
    /** @deprecated */
    experimentalSetStickerWidth(width: number): void;
    /** @deprecated */
    experimentalSetCenterStickerWidth(width: number): void;
    private ease;
}
export {};
