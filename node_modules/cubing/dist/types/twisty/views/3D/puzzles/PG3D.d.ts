import { Object3D, Texture, Vector3 } from "three";
import { Move } from "../../../../alg";
import type { KPuzzle } from "../../../../kpuzzle";
import type { StickerDat } from "../../../../puzzle-geometry";
import { ExperimentalPuzzleAppearance } from "../../../../puzzles";
import type { PuzzlePosition } from "../../../controllers/AnimationTypes";
import type { HintFaceletStyle } from "../../../model/props/puzzle/display/HintFaceletProp";
import type { Twisty3DPuzzle } from "./Twisty3DPuzzle";
export interface PG3DOptions {
    appearance?: ExperimentalPuzzleAppearance;
}
export declare class PG3D extends Object3D implements Twisty3DPuzzle {
    #private;
    private scheduleRenderCallback;
    private kpuzzle;
    private stickerDat;
    private params;
    private stickers;
    private axesInfo;
    private stickerTargets;
    private controlTargets;
    private movingObj;
    private filler;
    private foundationBound;
    private fixedGeo;
    private lastPos;
    private lastMoveTransformation;
    private hintMaterial;
    private stickerMaterial;
    private materialArray1;
    private materialArray2;
    private textured;
    private showHintStickers;
    private showFoundations;
    private hintMaterialDisposable;
    private stickerMaterialDisposable;
    isPG3DForTwisty3DPuzzleWrapper: true;
    constructor(scheduleRenderCallback: () => void, kpuzzle: KPuzzle, stickerDat: StickerDat, enableFoundationOpt?: boolean, enableHintStickersOpt?: boolean, hintStickerHeightScale?: number, params?: PG3DOptions);
    dispose(): void;
    experimentalGetStickerTargets(): Object3D[];
    experimentalGetControlTargets(): Object3D[];
    getClosestMoveToAxis(point: Vector3, transformations: {
        invert: boolean;
        depth?: "secondSlice" | "rotation" | "none";
    }): {
        move: Move;
        order: number;
    } | null;
    experimentalSetAppearance(appearance: ExperimentalPuzzleAppearance): void;
    onPositionChange(p: PuzzlePosition): void;
    private ease;
    private showHintFacelets;
    private updateMaterialArrays;
    private showFoundation;
    private setHintStickerOpacity;
    experimentalUpdateOptions(options: {
        showMainStickers?: boolean;
        hintFacelets?: HintFaceletStyle;
        showFoundation?: boolean;
        hintStickerOpacity?: number;
    }): void;
    private adduvs;
    experimentalUpdateTexture(enabled: boolean, stickerTexture?: Texture | null, hintTexture?: Texture | null): void;
}
