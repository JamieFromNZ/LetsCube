import type { PerspectiveCamera, Scene as ThreeScene } from "three";
import type { PuzzleLoader } from "../../../puzzles";
import type { Schedulable } from "../../controllers/RenderScheduler";
import type { BackViewLayout } from "../../model/props/viewer/BackViewProp";
import type { VisualizationStrategy } from "../../model/props/viewer/VisualizationStrategyProp";
import type { TwistyPlayerModel } from "../../model/TwistyPlayerModel";
import { ManagedCustomElement } from "../ManagedCustomElement";
import type { PressInfo } from "./DragTracker";
import { Twisty3DPuzzleWrapper } from "./Twisty3DPuzzleWrapper";
import { Twisty3DVantage } from "./Twisty3DVantage";
export declare class Twisty3DSceneWrapper extends ManagedCustomElement implements Schedulable {
    #private;
    model?: TwistyPlayerModel | undefined;
    disconnect(): void;
    constructor(model?: TwistyPlayerModel | undefined);
    connectedCallback(): Promise<void>;
    setBackView(backView: BackViewLayout): void;
    onBackView(backView: BackViewLayout): void;
    onPress(e: CustomEvent<{
        pressInfo: PressInfo;
        cameraPromise: Promise<PerspectiveCamera>;
    }>): Promise<void>;
    scene(): Promise<ThreeScene>;
    addVantage(vantage: Twisty3DVantage): void;
    removeVantage(vantage: Twisty3DVantage): void;
    experimentalVantages(): Iterable<Twisty3DVantage>;
    scheduleRender(): void;
    setCurrentTwisty3DPuzzleWrapper(scene: ThreeScene, twisty3DPuzzleWrapper: Twisty3DPuzzleWrapper): Promise<void>;
    onPuzzle(inputs: [
        puzzleLoader: PuzzleLoader,
        visualizationStrategy: VisualizationStrategy
    ]): Promise<void>;
}
