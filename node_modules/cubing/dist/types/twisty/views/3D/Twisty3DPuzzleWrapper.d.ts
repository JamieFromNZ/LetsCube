import type { Raycaster } from "three";
import { PuzzleLoader } from "../../../puzzles";
import type { VisualizationStrategy } from "../../model/props/viewer/VisualizationStrategyProp";
import type { TwistyPlayerModel } from "../../model/TwistyPlayerModel";
import type { Schedulable } from "../../controllers/RenderScheduler";
import type { Twisty3DPuzzle } from "./puzzles/Twisty3DPuzzle";
export declare class Twisty3DPuzzleWrapper implements Schedulable {
    #private;
    private model;
    schedulable: Schedulable;
    private puzzleLoader;
    private visualizationStrategy;
    constructor(model: TwistyPlayerModel, schedulable: Schedulable, puzzleLoader: PuzzleLoader, visualizationStrategy: VisualizationStrategy);
    disconnect(): void;
    scheduleRender(): void;
    twisty3DPuzzle(): Promise<Twisty3DPuzzle>;
    raycastMove(raycasterPromise: Promise<Raycaster>, transformations: {
        invert: boolean;
        depth?: "secondSlice" | "rotation" | "none";
    }): Promise<void>;
}
