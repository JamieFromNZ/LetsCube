import type { PerspectiveCamera, WebGLRenderer } from "three";
import { Stats } from "../../../vendor/three/examples/jsm/libs/stats.modified.module";
import type { TwistyPropParent } from "../../model/props/TwistyProp";
import type { OrbitCoordinates } from "../../model/props/viewer/OrbitCoordinatesRequestProp";
import type { TwistyPlayerModel } from "../../model/TwistyPlayerModel";
import { ManagedCustomElement } from "../ManagedCustomElement";
import type { Twisty3DSceneWrapper } from "./Twisty3DSceneWrapper";
import { TwistyOrbitControls } from "./TwistyOrbitControls";
export declare function debugShowRenderStats(enable: boolean): void;
export declare function setCameraFromOrbitCoordinates(camera: PerspectiveCamera, orbitCoordinates: OrbitCoordinates, backView?: boolean): Promise<void>;
export declare function experimentalForceNewRendererSharing(share: boolean | null): void;
export declare class Twisty3DVantage extends ManagedCustomElement {
    #private;
    private model?;
    private options?;
    scene: Twisty3DSceneWrapper | null;
    stats: Stats | null;
    private rendererIsShared;
    loadingElement: HTMLDivElement | null;
    constructor(model?: TwistyPlayerModel | undefined, scene?: Twisty3DSceneWrapper, options?: {
        backView?: boolean | undefined;
    } | undefined);
    connectedCallback(): Promise<void>;
    clearCanvas(): Promise<void>;
    renderer(): Promise<WebGLRenderer>;
    canvasInfo(): Promise<{
        canvas: HTMLCanvasElement;
        context: CanvasRenderingContext2D;
    }>;
    camera(): Promise<PerspectiveCamera>;
    orbitControls(): Promise<TwistyOrbitControls>;
    addListener<T>(prop: TwistyPropParent<T>, listener: (value: T) => void): void;
    disconnect(): void;
    render(): Promise<void>;
    scheduleRender(): void;
}
