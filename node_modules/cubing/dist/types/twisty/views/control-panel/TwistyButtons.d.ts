import { ManagedCustomElement } from "../ManagedCustomElement";
import { ButtonAppearances, ButtonIcon } from "../../model/props/viewer/ButtonAppearanceProp";
import type { TwistyPlayerModel } from "../../model/TwistyPlayerModel";
import type { TwistyPlayerController } from "../../controllers/TwistyPlayerController";
declare const buttonCommands: {
    fullscreen: boolean;
    "jump-to-start": boolean;
    "play-step-backwards": boolean;
    "play-pause": boolean;
    "play-step": boolean;
    "jump-to-end": boolean;
    "twizzle-link": boolean;
};
export declare type ButtonCommand = keyof typeof buttonCommands;
export declare class TwistyButtons extends ManagedCustomElement {
    #private;
    model?: TwistyPlayerModel | undefined;
    controller?: TwistyPlayerController | undefined;
    private fullscreenElement?;
    buttons: Record<ButtonCommand, TwistyButton> | null;
    constructor(model?: TwistyPlayerModel | undefined, controller?: TwistyPlayerController | undefined, fullscreenElement?: HTMLElement | undefined);
    connectedCallback(): void;
    onFullscreenButton(): Promise<void>;
    update(buttonAppearances: ButtonAppearances): Promise<void>;
}
declare class TwistyButton extends ManagedCustomElement {
    #private;
    button: HTMLButtonElement;
    connectedCallback(): void;
    setIcon(iconName: ButtonIcon): void;
}
export {};
