/**
 * Warning: the current implementation of <twisty-alg-editor> is *not good*,
 * but it is *good enough*. The important parts is that:
 *
 * - The editor can be used in apps without much effort.
 * - The editor handles alg validation and move highlighting *okay* when not
 *   connected to a `<twisty-player>`.
 * - The editor stays in sync if it's connected to a `<twisty-player>`.
 *
 * The current implementation still has some race conditions and edge cases. A
 * proper rewrite with a better model would be very welcome.
 */
import type { ExperimentalParsed } from "../../../alg";
import { Move, Pause } from "../../../alg";
import { ManagedCustomElement } from "../ManagedCustomElement";
import { TwistyPlayer } from "../TwistyPlayer";
import { TwistyAlgEditorModel } from "./model";
declare type TwistyPlayerAlgProp = "alg" | "setupAlg";
export declare class TwistyAlgEditor extends ManagedCustomElement {
    #private;
    model: TwistyAlgEditorModel;
    debugNeverRequestTimestamp: boolean;
    constructor(options?: {
        twistyPlayer?: TwistyPlayer;
        twistyPlayerProp?: TwistyPlayerAlgProp;
    });
    set algString(s: string);
    get algString(): string;
    set placeholder(placeholderText: string);
    onInput(): void;
    onSelectionChange(): Promise<void>;
    onBlur(): Promise<void>;
    setAlgIssueClassForPuzzle(issues: "none" | "warning" | "error"): void;
    highlightLeaf(leaf: ExperimentalParsed<Move | Pause> | null): void;
    get twistyPlayer(): TwistyPlayer | null;
    set twistyPlayer(twistyPlayer: TwistyPlayer | null);
    protected attributeChangedCallback(attributeName: string, _oldValue: string, newValue: string): void;
    static get observedAttributes(): string[];
}
export {};
