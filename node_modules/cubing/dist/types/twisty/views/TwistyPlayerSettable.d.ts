import type { Alg } from "../../alg";
import type { PuzzleDescriptionString } from "../../puzzle-geometry/PGPuzzles";
import type { ExperimentalStickering, PuzzleID } from "../../twisty";
import type { BackgroundThemeWithAuto } from "../model/props/viewer/BackgroundProp";
import type { BackViewLayoutWithAuto } from "../model/props/viewer/BackViewProp";
import type { ControlPanelThemeWithAuto } from "../model/props/viewer/ControlPanelProp";
import type { HintFaceletStyleWithAuto } from "../model/props/puzzle/display/HintFaceletProp";
import type { IndexerStrategyName } from "../model/props/puzzle/state/IndexerConstructorRequestProp";
import type { TimestampRequest } from "../model/props/timeline/TimestampRequestProp";
import type { ViewerLinkPageWithAuto } from "../model/props/viewer/ViewerLinkProp";
import type { VisualizationFormatWithAuto } from "../model/props/viewer/VisualizationProp";
import { TwistyPlayerModel } from "../model/TwistyPlayerModel";
import type { MillisecondTimestamp } from "../controllers/AnimationTypes";
import { ManagedCustomElement } from "./ManagedCustomElement";
import type { MovePressInput } from "../model/props/puzzle/state/MovePressInputProp";
import type { SetupToLocation } from "../model/props/puzzle/state/SetupAnchorProp";
export declare abstract class TwistyPlayerSettable extends ManagedCustomElement {
    experimentalModel: TwistyPlayerModel;
    set alg(newAlg: Alg | string);
    get alg(): never;
    set experimentalSetupAlg(newSetup: Alg | string);
    get experimentalSetupAlg(): never;
    set experimentalSetupAnchor(anchor: SetupToLocation);
    get experimentalSetupAnchor(): never;
    set puzzle(puzzleID: PuzzleID);
    get puzzle(): never;
    set experimentalPuzzleDescription(puzzleDescription: PuzzleDescriptionString);
    get experimentalPuzzleDescription(): never;
    set timestamp(timestamp: TimestampRequest);
    get timestamp(): never;
    set hintFacelets(hintFaceletStyle: HintFaceletStyleWithAuto);
    get hintFacelets(): never;
    set experimentalStickering(stickering: ExperimentalStickering);
    get experimentalStickering(): never;
    set backView(backView: BackViewLayoutWithAuto);
    get backView(): never;
    set background(backgroundTheme: BackgroundThemeWithAuto);
    get background(): never;
    set controlPanel(newControlPanel: ControlPanelThemeWithAuto);
    get controlPanel(): never;
    set visualization(visualizationFormat: VisualizationFormatWithAuto);
    get visualization(): never;
    set experimentalTitle(title: string | null);
    get experimentalTitle(): never;
    set experimentalVideoURL(videoURL: string | null);
    get experimentalVideoURL(): never;
    set experimentalCompetitionID(competitionID: string | null);
    get experimentalCompetitionID(): never;
    set viewerLink(viewerLinkPage: ViewerLinkPageWithAuto);
    get viewerLink(): never;
    set experimentalMovePressInput(movePressInput: MovePressInput);
    get experimentalMovePressInput(): never;
    set cameraLatitude(latitude: number);
    get cameraLatitude(): never;
    set cameraLongitude(longitude: number);
    get cameraLongitude(): never;
    set cameraDistance(distance: number);
    get cameraDistance(): never;
    set cameraLatitudeLimit(latitudeLimit: number);
    get cameraLatitudeLimit(): never;
    set indexer(indexer: IndexerStrategyName);
    get indexer(): never;
    set tempoScale(newTempoScale: number);
    get tempoScale(): never;
    set experimentalSprite(url: string | URL);
    get experimentalSprite(): never;
    set experimentalHintSprite(url: string | URL);
    get experimentalHintSprite(): never;
    experimentalGet: ExperimentalGetters;
}
declare class ExperimentalGetters {
    private model;
    constructor(model: TwistyPlayerModel);
    alg(): Promise<Alg>;
    setupAlg(): Promise<Alg>;
    puzzleID(): Promise<PuzzleID>;
    timestamp(): Promise<MillisecondTimestamp>;
}
export {};
