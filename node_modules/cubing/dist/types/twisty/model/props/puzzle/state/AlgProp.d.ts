import { Alg } from "../../../../../alg";
import { TwistyPropSource } from "../../TwistyProp";
export declare class AlgIssues {
    readonly warnings: readonly string[];
    readonly errors: readonly string[];
    constructor(issues?: {
        warnings?: string[];
        errors?: string[];
    });
    add(issues?: {
        warnings?: string[];
        errors?: string[];
    }): AlgIssues;
    /** @deprecated */
    log(): void;
}
export interface AlgWithIssues {
    alg: Alg;
    issues: AlgIssues;
}
export declare function algWithIssuesFromString(s: string): AlgWithIssues;
export declare class AlgProp extends TwistyPropSource<AlgWithIssues, Alg | string> {
    getDefaultValue(): AlgWithIssues;
    canReuseValue(v1: AlgWithIssues, v2: AlgWithIssues): boolean;
    derive(newAlg: Alg | string): Promise<AlgWithIssues>;
}
