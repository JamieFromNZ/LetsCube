import type { PuzzleID } from "../puzzle/structure/PuzzleIDRequestProp";
import { TwistyPropDerived } from "../TwistyProp";
import { CoordinateDegrees, OrbitCoordinates, OrbitCoordinatesRequest } from "./OrbitCoordinatesRequestProp";
import type { VisualizationStrategy } from "./VisualizationStrategyProp";
interface OrbitCoordinatesPropInputs {
    orbitCoordinatesRequest: OrbitCoordinatesRequest;
    latitudeLimit: CoordinateDegrees;
    puzzleID: PuzzleID;
    strategy: VisualizationStrategy;
}
export declare class OrbitCoordinatesProp extends TwistyPropDerived<OrbitCoordinatesPropInputs, OrbitCoordinates> {
    canReuseValue(v1: OrbitCoordinates, v2: OrbitCoordinates): boolean;
    derive(inputs: OrbitCoordinatesPropInputs): Promise<OrbitCoordinates>;
}
export declare const centeredCameraOrbitCoordinates: OrbitCoordinates;
export declare const cubeCube3DCameraOrbitCoordinates: OrbitCoordinates;
export declare const cubePG3DCameraOrbitCoordinates: OrbitCoordinates;
export declare const megaminxCameraOrbitCoordinates: OrbitCoordinates;
export declare const pyraminxCameraOrbitCoordinates: OrbitCoordinates;
export declare const cornerCameraOrbitCoordinates: OrbitCoordinates;
export declare function defaultCameraOrbitCoordinates(puzzleID: PuzzleID, strategy: VisualizationStrategy): OrbitCoordinates;
export interface ManagedAttribute<K> {
    string: string;
    value: K;
    setString(s: string): boolean;
    setValue(v: K): boolean;
}
export {};
