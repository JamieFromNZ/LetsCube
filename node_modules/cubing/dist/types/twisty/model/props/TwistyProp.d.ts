import type { UserVisibleErrorTracker } from "../UserVisibleErrorTracker";
declare type InputRecord = {};
export declare type InputProps<T extends InputRecord> = {
    [s in keyof T]: TwistyPropParent<T[s]>;
};
interface SourceEventDetail<OutputType> {
    sourceProp: TwistyPropSource<OutputType, any>;
    value: Promise<OutputType>;
    generation: number;
}
declare type SourceEvent<T> = CustomEvent<SourceEventDetail<T>>;
declare type PromiseOrValue<T> = T | Promise<T>;
export declare abstract class TwistyPropParent<T> {
    #private;
    abstract get(): Promise<T>;
    canReuse(v1: T, v2: T): boolean;
    canReuseValue(_v1: T, _v2: T): boolean;
    debugGetChildren(): Array<TwistyPropDerived<any, any>>;
    protected addChild(child: TwistyPropDerived<any, any>): void;
    protected removeChild(child: TwistyPropDerived<any, any>): void;
    protected lastSourceGeneration: number;
    protected markStale(sourceEvent: SourceEvent<any>): void;
    /** @deprecated */
    addRawListener(listener: () => void, options?: {
        initial: boolean;
    }): void;
    /** @deprecated */
    removeRawListener(listener: () => void): void;
    addFreshListener(listener: (value: T) => void): void;
    removeFreshListener(listener: (value: T) => void): void;
}
export declare abstract class TwistyPropSource<OutputType, InputType = OutputType> extends TwistyPropParent<OutputType> {
    #private;
    abstract getDefaultValue(): PromiseOrValue<OutputType>;
    constructor(initialValue?: PromiseOrValue<InputType>);
    set(input: PromiseOrValue<InputType>): void;
    get(): Promise<OutputType>;
    deriveFromPromiseOrValue(input: PromiseOrValue<InputType>, oldValuePromise: Promise<OutputType>): Promise<OutputType>;
    protected abstract derive(input: InputType, oldValuePromise: Promise<OutputType>): PromiseOrValue<OutputType>;
}
export declare abstract class SimpleTwistyPropSource<SimpleType> extends TwistyPropSource<SimpleType> {
    derive(input: SimpleType): PromiseOrValue<SimpleType>;
}
export declare const NO_VALUE: unique symbol;
export declare type NoValueType = typeof NO_VALUE;
export declare abstract class TwistyPropDerived<InputTypes extends InputRecord, OutputType> extends TwistyPropParent<OutputType> {
    #private;
    protected userVisibleErrorTracker?: UserVisibleErrorTracker | undefined;
    constructor(parents: InputProps<InputTypes>, userVisibleErrorTracker?: UserVisibleErrorTracker | undefined);
    get(): Promise<OutputType>;
    protected abstract derive(input: InputTypes): PromiseOrValue<OutputType>;
}
export declare class FreshListenerManager {
    #private;
    addListener<T>(prop: TwistyPropParent<T>, listener: (value: T) => void): void;
    addMultiListener<U, V>(props: [TwistyPropParent<U>, TwistyPropParent<V>], listener: (values: [U, V]) => void): void;
    disconnect(): void;
}
export {};
