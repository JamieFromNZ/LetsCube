import { ManagedCustomElement } from "../../views/ManagedCustomElement";
import type { TwistyPlayer } from "../../views/TwistyPlayer";
import { TwistyPropParent } from "./TwistyProp";
export declare class TwistyPropDebugger extends ManagedCustomElement {
    #private;
    private name;
    twistyProp: TwistyPropParent<any>;
    constructor(name: string, twistyProp: TwistyPropParent<any>);
    valueElem: HTMLElement | null;
    connectedCallback(): void;
    onPropRaw(): Promise<void>;
    onProp(value: any): Promise<void>;
    setHighlight(highlightType: "de-emphasize" | "grandparent-or-further" | "parent" | "self" | "child" | "grandchild-or-further" | null): void;
}
export declare class TwistyPlayerDebugger extends ManagedCustomElement {
    private player;
    constructor(player: TwistyPlayer);
    connectedCallback(): void;
    twistyPropDebuggers: Map<TwistyPropParent<any>, TwistyPropDebugger>;
    parentPropElems: Map<TwistyPropDebugger, Set<TwistyPropDebugger>>;
    childPropElems: Map<TwistyPropDebugger, Set<TwistyPropDebugger>>;
    currentHighlighted: TwistyPropDebugger | null;
    highlightFamilyTree(prop: TwistyPropDebugger): void;
    getDescendants(prop: TwistyPropDebugger, accumulator?: Set<TwistyPropDebugger>): Set<TwistyPropDebugger>;
    getAncestors(prop: TwistyPropDebugger, accumulator?: Set<TwistyPropDebugger>): Set<TwistyPropDebugger>;
}
