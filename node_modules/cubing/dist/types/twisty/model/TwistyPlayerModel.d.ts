import { Move } from "../../alg";
import { ArbitraryStringProp } from "./props/general/ArbitraryStringProp";
import { URLProp } from "./props/general/URLProp";
import { AlgProp } from "./props/puzzle/state/AlgProp";
import { AlgTransformationProp } from "./props/puzzle/state/AlgTransformationProp";
import { AnchorTransformationProp } from "./props/puzzle/state/AnchorTransformationProp";
import { CatchUpMoveProp } from "./props/puzzle/state/CatchUpMoveProp";
import { CurrentLeavesSimplifiedProp } from "./props/puzzle/state/CurrentLeavesSimplified";
import { CurrentMoveInfoProp } from "./props/puzzle/state/CurrentMoveInfoProp";
import { CurrentStateProp as CurrentStateProp } from "./props/puzzle/state/CurrentStateProp";
import { IndexerConstructorProp } from "./props/puzzle/state/IndexerConstructorProp";
import { IndexerConstructorRequestProp } from "./props/puzzle/state/IndexerConstructorRequestProp";
import { IndexerProp } from "./props/puzzle/state/IndexerProp";
import { LegacyPositionProp } from "./props/puzzle/state/LegacyPositionProp";
import { NaiveMoveCountProp } from "./props/puzzle/state/NaiveMoveCountProp";
import { PuzzleAlgProp } from "./props/puzzle/state/PuzzleAlgProp";
import { SetupAnchorProp } from "./props/puzzle/state/SetupAnchorProp";
import { SetupTransformationProp } from "./props/puzzle/state/SetupTransformationProp";
import { KPuzzleProp } from "./props/puzzle/structure/KPuzzleProp";
import { PGPuzzleDescriptionStringProp } from "./props/puzzle/structure/PuzzleDescriptionProp";
import { PuzzleIDProp } from "./props/puzzle/structure/PuzzleIDProp";
import { PuzzleIDRequestProp } from "./props/puzzle/structure/PuzzleIDRequestProp";
import { PuzzleLoaderProp } from "./props/puzzle/structure/PuzzleLoaderProp";
import { CoarseTimelineInfoProp } from "./props/timeline/CoarseTimelineInfoProp";
import { DetailedTimelineInfoProp } from "./props/timeline/DetailedTimelineInfoProp";
import { PlayingInfoProp } from "./props/timeline/PlayingInfoProp";
import { TempoScaleProp } from "./props/timeline/TempoScaleProp";
import { TimestampRequestProp } from "./props/timeline/TimestampRequestProp";
import { BackViewProp } from "./props/viewer/BackViewProp";
import { ButtonAppearanceProp } from "./props/viewer/ButtonAppearanceProp";
import { ControlPanelProp } from "./props/viewer/ControlPanelProp";
import { TimeRangeProp } from "./props/viewer/TimeRangeProp";
import { ViewerLinkProp } from "./props/viewer/ViewerLinkProp";
import { VisualizationFormatProp } from "./props/viewer/VisualizationProp";
import { VisualizationStrategyProp } from "./props/viewer/VisualizationStrategyProp";
import { TwistySceneModel } from "./TwistySceneModel";
import { UserVisibleErrorTracker } from "./UserVisibleErrorTracker";
export declare class TwistyPlayerModel {
    userVisibleErrorTracker: UserVisibleErrorTracker;
    alg: AlgProp;
    backView: BackViewProp;
    controlPanel: ControlPanelProp;
    catchUpMove: CatchUpMoveProp;
    indexerConstructorRequest: IndexerConstructorRequestProp;
    playingInfo: PlayingInfoProp;
    puzzleDescriptionRequest: PGPuzzleDescriptionStringProp;
    puzzleIDRequest: PuzzleIDRequestProp;
    setupAnchor: SetupAnchorProp;
    setupAlg: AlgProp;
    setupTransformation: SetupTransformationProp;
    tempoScale: TempoScaleProp;
    timestampRequest: TimestampRequestProp;
    viewerLink: ViewerLinkProp;
    visualizationFormat: VisualizationFormatProp;
    title: ArbitraryStringProp;
    videoURL: URLProp;
    competitionID: ArbitraryStringProp;
    puzzleLoader: PuzzleLoaderProp;
    kpuzzle: KPuzzleProp;
    puzzleID: PuzzleIDProp;
    puzzleAlg: PuzzleAlgProp;
    puzzleSetupAlg: PuzzleAlgProp;
    visualizationStrategy: VisualizationStrategyProp;
    indexerConstructor: IndexerConstructorProp;
    moveCount: NaiveMoveCountProp;
    setupAlgTransformation: AlgTransformationProp;
    indexer: IndexerProp;
    anchorTransformation: AnchorTransformationProp;
    timeRange: TimeRangeProp;
    detailedTimelineInfo: DetailedTimelineInfoProp;
    coarseTimelineInfo: CoarseTimelineInfoProp;
    currentMoveInfo: CurrentMoveInfoProp;
    buttonAppearance: ButtonAppearanceProp;
    currentLeavesSimplified: CurrentLeavesSimplifiedProp;
    currentState: CurrentStateProp;
    legacyPosition: LegacyPositionProp;
    twistySceneModel: TwistySceneModel;
    twizzleLink(): Promise<string>;
    experimentalAddMove(flexibleMove: Move | string, options?: {
        coalesce?: boolean;
        mod?: number;
    }): void;
    /** @deprecated */
    get playingInfoProp(): PlayingInfoProp;
}
