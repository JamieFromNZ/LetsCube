import { BoundaryType, MillisecondTimestamp } from "./AnimationTypes";
import type { PlayingInfo, SimpleDirection } from "../model/props/timeline/PlayingInfoProp";
import type { TwistyPlayerModel } from "../model/TwistyPlayerModel";
import type { CatchUpMove } from "../model/props/puzzle/state/CatchUpMoveProp";
export interface TwistyAnimationControllerDelegate {
    flash(): void;
}
export declare class TwistyAnimationController {
    #private;
    private delegate;
    private playing;
    private direction;
    private catchUpHelper;
    private model;
    private lastDatestamp;
    private lastTimestampPromise;
    private scheduler;
    constructor(model: TwistyPlayerModel, delegate: TwistyAnimationControllerDelegate);
    onPlayingProp(playingInfo: PlayingInfo): Promise<void>;
    onCatchUpMoveProp(catchUpMove: CatchUpMove): Promise<void>;
    jumpToStart(options?: {
        flash: boolean;
    }): void;
    jumpToEnd(options?: {
        flash: boolean;
    }): void;
    playPause(): void;
    play(options?: {
        direction?: SimpleDirection;
        untilBoundary?: BoundaryType;
        autoSkipToOtherEndIfStartingAtBoundary?: boolean;
        loop?: boolean;
    }): Promise<void>;
    pause(): void;
    animFrame(frameDatestamp: MillisecondTimestamp): Promise<void>;
}
