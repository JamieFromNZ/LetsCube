import type { Move } from "../../../alg/units";
import type { KTransformation } from "../../../kpuzzle";
import type { KState } from "../../../kpuzzle/KState";
import type { Direction, Duration, MillisecondTimestamp, PuzzlePosition, Timestamp } from "../AnimationTypes";
import type { AnimatedLeafUnit } from "./simultaneous-moves/simul-moves";
export interface CurrentMove {
    move: Move;
    direction: Direction;
    fraction: number;
    startTimestamp: MillisecondTimestamp;
    endTimestamp: MillisecondTimestamp;
}
export declare function currentMoveEquals(cm1: CurrentMove, cm2: CurrentMove): boolean;
export declare function currentMoveArrayEquals(cma1: CurrentMove[], cma2: CurrentMove[]): boolean;
export interface CurrentMoveInfo {
    stateIndex: number;
    currentMoves: CurrentMove[];
    movesFinishing: CurrentMove[];
    movesFinished: CurrentMove[];
    movesStarting: CurrentMove[];
    latestStart: number;
    earliestEnd: number;
}
export declare function currentMoveInfoEquals(c1: CurrentMoveInfo, c2: CurrentMoveInfo): boolean;
export interface AlgIndexer {
    getAnimLeaf(index: number): AnimatedLeafUnit | null;
    indexToMoveStartTimestamp(index: number): Timestamp;
    stateAtIndex(index: number, startSTate?: KState): KState;
    transformationAtIndex(index: number): KTransformation;
    numAnimatedLeaves(): number;
    timestampToIndex(timestamp: Timestamp): number;
    algDuration(): Duration;
    moveDuration(index: number): number;
    timestampToPosition?: (timestamp: Timestamp, startState?: KState) => PuzzlePosition;
    currentMoveInfo?: (timestamp: Timestamp) => CurrentMoveInfo;
}
