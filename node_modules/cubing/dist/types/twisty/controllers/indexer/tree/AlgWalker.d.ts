import { Alg, Commutator, Conjugate, Grouping, LineComment, Move, Newline, Pause, TraversalDownUp, TraversalUp, Unit } from "../../../../alg";
import type { KPuzzle, KTransformation } from "../../../../kpuzzle";
export declare class AlgPartDecoration {
    moveCount: number;
    duration: number;
    forward: KTransformation;
    backward: KTransformation;
    children: Array<AlgPartDecoration>;
    constructor(moveCount: number, duration: number, forward: KTransformation, backward: KTransformation, children?: Array<AlgPartDecoration>);
}
export declare class DecoratorConstructor extends TraversalUp<AlgPartDecoration> {
    private kpuzzle;
    private identity;
    private dummyLeaf;
    private durationFn;
    private cache;
    constructor(kpuzzle: KPuzzle);
    traverseAlg(alg: Alg): AlgPartDecoration;
    traverseGrouping(grouping: Grouping): AlgPartDecoration;
    traverseMove(move: Move): AlgPartDecoration;
    traverseCommutator(commutator: Commutator): AlgPartDecoration;
    traverseConjugate(conjugate: Conjugate): AlgPartDecoration;
    traversePause(pause: Pause): AlgPartDecoration;
    traverseNewline(_newline: Newline): AlgPartDecoration;
    traverseLineComment(_comment: LineComment): AlgPartDecoration;
    private mult;
}
declare class WalkerDown {
    apd: AlgPartDecoration;
    back: boolean;
    constructor(apd: AlgPartDecoration, back: boolean);
}
export declare class AlgWalker extends TraversalDownUp<WalkerDown, boolean> {
    kpuzzle: KPuzzle;
    algOrUnit: Alg | Unit;
    apd: AlgPartDecoration;
    move?: Unit;
    moveDuration: number;
    back: boolean;
    st: KTransformation;
    root: WalkerDown;
    i: number;
    dur: number;
    private goali;
    private goaldur;
    constructor(kpuzzle: KPuzzle, algOrUnit: Alg | Unit, // TODO: can we keep these separate?
    apd: AlgPartDecoration);
    moveByIndex(loc: number): boolean;
    moveByDuration(dur: number): boolean;
    dosearch(loc: number, dur: number): boolean;
    traverseAlg(alg: Alg, wd: WalkerDown): boolean;
    traverseGrouping(grouping: Grouping, wd: WalkerDown): boolean;
    traverseMove(move: Move, wd: WalkerDown): boolean;
    traverseCommutator(commutator: Commutator, wd: WalkerDown): boolean;
    traverseConjugate(conjugate: Conjugate, wd: WalkerDown): boolean;
    traversePause(pause: Pause, wd: WalkerDown): boolean;
    traverseNewline(_newline: Newline, _wd: WalkerDown): boolean;
    traverseLineComment(_lineComment: LineComment, _wd: WalkerDown): boolean;
    private firstcheck;
    private domult;
    private keepgoing;
}
export {};
