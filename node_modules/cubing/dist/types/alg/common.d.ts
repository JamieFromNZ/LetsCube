import type { Alg } from "./Alg";
import type { IterationDirection } from "./iteration";
import type { LeafUnit, Unit } from "./units/Unit";
export declare function setAlgDebugField(debug: boolean): void;
export declare abstract class Comparable {
    is(c: any): boolean;
    as<T>(c: new (...args: any) => T): T | null;
    abstract isIdentical(other: Comparable): boolean;
}
export interface Repeatable extends Comparable {
    experimentalExpand(iterDir?: IterationDirection, depth?: number): Generator<LeafUnit>;
}
export declare abstract class AlgCommon<T extends Alg | Unit> extends Comparable implements Repeatable {
    constructor();
    get log(): (message?: any) => void;
    abstract toString(): string;
    abstract invert(): T;
    abstract experimentalExpand(iterDir: IterationDirection): Generator<LeafUnit>;
}
