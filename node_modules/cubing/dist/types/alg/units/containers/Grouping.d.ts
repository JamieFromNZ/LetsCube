import { Alg, FlexibleAlgSource } from "../../Alg";
import { AlgCommon, Comparable } from "../../common";
import { IterationDirection } from "../../iteration";
import { Move } from "../leaves/Move";
import type { LeafUnit } from "../Unit";
export declare class Grouping extends AlgCommon<Grouping> {
    #private;
    constructor(algSource: FlexibleAlgSource, amount?: number);
    isIdentical(other: Comparable): boolean;
    get alg(): Alg;
    get amount(): number;
    /** @deprecated */
    get experimentalRepetitionSuffix(): string;
    invert(): Grouping;
    experimentalExpand(iterDir?: IterationDirection, depth?: number): Generator<LeafUnit>;
    static fromString(): Grouping;
    toString(): string;
    experimentalAsSquare1Tuple(): [moveU: Move, moveD: Move] | null;
}
