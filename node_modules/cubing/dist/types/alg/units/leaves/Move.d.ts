import { AlgCommon, Comparable } from "../../common";
import { IterationDirection } from "../../iteration";
import type { LeafUnit } from "../Unit";
interface QuantumMoveModifications {
    outerLayer?: number;
    innerLayer?: number;
    family?: string;
}
export declare class QuantumMove extends Comparable {
    #private;
    constructor(family: string, innerLayer?: number | null, outerLayer?: number | null);
    static fromString(s: string): QuantumMove;
    modified(modifications: QuantumMoveModifications): QuantumMove;
    isIdentical(other: QuantumMove): boolean;
    /** @deprecated */
    get family(): string;
    /** @deprecated */
    get outerLayer(): number | null;
    /** @deprecated */
    get innerLayer(): number | null;
    experimentalExpand(): Generator<LeafUnit>;
    toString(): string;
}
export interface MoveModifications {
    outerLayer?: number;
    innerLayer?: number;
    family?: string;
    amount?: number;
}
export declare class Move extends AlgCommon<Move> {
    #private;
    constructor(...args: [QuantumMove] | [QuantumMove, number] | [string] | [string, number]);
    isIdentical(other: Comparable): boolean;
    invert(): Move;
    experimentalExpand(iterDir?: IterationDirection): Generator<LeafUnit>;
    get quantum(): QuantumMove;
    modified(modifications: MoveModifications): Move;
    static fromString(s: string): Move;
    get amount(): number;
    /** @deprecated */
    get type(): string;
    /** @deprecated */
    get family(): string;
    /** @deprecated */
    get outerLayer(): number | undefined;
    /** @deprecated */
    get innerLayer(): number | undefined;
    toString(): string;
}
export {};
