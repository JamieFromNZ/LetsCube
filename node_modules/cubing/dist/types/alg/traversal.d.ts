import type { Alg } from "./Alg";
import { Grouping } from "./units/containers/Grouping";
import { Commutator } from "./units/containers/Commutator";
import { Move, QuantumMove } from "./units/leaves/Move";
import { Newline } from "./units/leaves/Newline";
import { Pause } from "./units/leaves/Pause";
import { Conjugate } from "./units/containers/Conjugate";
import { LineComment } from "./units/leaves/LineComment";
import type { Unit } from "./units/Unit";
export declare abstract class TraversalDownUp<DataDown, DataAlgUp, DataUnitUp = DataAlgUp> {
    traverseUnit(unit: Unit, dataDown: DataDown): DataUnitUp;
    traverseIntoUnit(unit: Unit, dataDown: DataDown): Unit;
    abstract traverseAlg(alg: Alg, dataDown: DataDown): DataAlgUp;
    abstract traverseGrouping(grouping: Grouping, dataDown: DataDown): DataUnitUp;
    abstract traverseMove(move: Move, dataDown: DataDown): DataUnitUp;
    abstract traverseCommutator(commutator: Commutator, dataDown: DataDown): DataUnitUp;
    abstract traverseConjugate(conjugate: Conjugate, dataDown: DataDown): DataUnitUp;
    abstract traversePause(pause: Pause, dataDown: DataDown): DataUnitUp;
    abstract traverseNewline(newline: Newline, dataDown: DataDown): DataUnitUp;
    abstract traverseLineComment(comment: LineComment, dataDown: DataDown): DataUnitUp;
}
export declare abstract class TraversalUp<DataAlgUp, DataUnitUp = DataAlgUp> extends TraversalDownUp<undefined, DataAlgUp, DataUnitUp> {
    traverseUnit(unit: Unit): DataUnitUp;
    traverseIntoUnit(unit: Unit): Unit;
    abstract traverseAlg(alg: Alg): DataAlgUp;
    abstract traverseGrouping(grouping: Grouping): DataUnitUp;
    abstract traverseMove(move: Move): DataUnitUp;
    abstract traverseCommutator(commutator: Commutator): DataUnitUp;
    abstract traverseConjugate(conjugate: Conjugate): DataUnitUp;
    abstract traversePause(pause: Pause): DataUnitUp;
    abstract traverseNewline(newline: Newline): DataUnitUp;
    abstract traverseLineComment(comment: LineComment): DataUnitUp;
}
export interface SimplifyOptions {
    collapseMoves?: boolean;
    quantumMoveOrder?: (quantumMove: QuantumMove) => number;
    depth?: number | null;
}
export declare const simplify: (alg: Alg, options: SimplifyOptions) => Generator<Unit>;
