{
  "version": 3,
  "sources": ["../../src/cubing/alg/common.ts", "../../src/cubing/alg/iteration.ts", "../../src/cubing/alg/limits.ts", "../../src/cubing/alg/AlgBuilder.ts", "../../src/cubing/alg/units/containers/Commutator.ts", "../../src/cubing/alg/units/containers/Conjugate.ts", "../../src/cubing/alg/units/leaves/LineComment.ts", "../../src/cubing/alg/units/leaves/Newline.ts", "../../src/cubing/alg/units/leaves/Pause.ts", "../../src/cubing/alg/parse.ts", "../../src/cubing/alg/warnOnce.ts", "../../src/cubing/alg/units/QuantumWithAmount.ts", "../../src/cubing/alg/units/leaves/Move.ts", "../../src/cubing/alg/units/containers/Grouping.ts", "../../src/cubing/alg/is.ts", "../../src/cubing/alg/traversal.ts", "../../src/cubing/alg/Alg.ts", "../../src/cubing/alg/example.ts", "../../src/cubing/alg/keyboard.ts", "../../src/cubing/alg/url.ts", "../../src/cubing/alg/operation.ts"],
  "sourcesContent": ["import type { Alg } from \"./Alg\";\nimport type { IterationDirection } from \"./iteration\";\nimport type { LeafUnit, Unit } from \"./units/Unit\";\n\nlet writeAlgDebugField = false;\nexport function setAlgDebugField(debug: boolean): void {\n  writeAlgDebugField = debug;\n}\n\nexport abstract class Comparable {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  is(c: any): boolean {\n    return this instanceof c;\n  }\n\n  as<T>(c: new (...args: any) => T): T | null {\n    return this instanceof c ? this : null;\n  }\n\n  abstract isIdentical(other: Comparable): boolean;\n}\n\nexport interface Repeatable extends Comparable {\n  experimentalExpand(\n    iterDir?: IterationDirection,\n    depth?: number,\n  ): Generator<LeafUnit>;\n}\n\n// Common to algs or units\nexport abstract class AlgCommon<T extends Alg | Unit>\n  extends Comparable\n  implements Repeatable\n{\n  constructor() {\n    super();\n    if (writeAlgDebugField) {\n      Object.defineProperty(this, \"_debugStr\", {\n        get: () => {\n          return this.toString();\n        },\n      });\n    }\n  }\n\n  get log(): (message?: any) => void {\n    // By returning a (bound) version of `console.log`, we ensure that DevTools\n    // logs the call site instead of this function.\n    return console.log.bind(console, this, this.toString()) as (\n      message?: any,\n    ) => void;\n  }\n\n  abstract toString(): string;\n\n  abstract invert(): T;\n\n  abstract experimentalExpand(iterDir: IterationDirection): Generator<LeafUnit>;\n}\n", "export enum IterationDirection {\n  Forwards = 1,\n  Backwards = -1,\n}\n\nexport function toggleDirection(\n  iterationDirection: IterationDirection,\n  flip: boolean = true,\n): IterationDirection {\n  if (!flip) {\n    return iterationDirection;\n  }\n  switch (iterationDirection) {\n    case IterationDirection.Forwards:\n      return IterationDirection.Backwards;\n    case IterationDirection.Backwards:\n      return IterationDirection.Forwards;\n  }\n}\n\nexport function direct<T>(\n  g: Iterable<T>,\n  iterDir: IterationDirection,\n): Iterable<T> {\n  return iterDir === IterationDirection.Backwards ? Array.from(g).reverse() : g;\n}\n\nexport function reverse<T>(g: Iterable<T>): Iterable<T> {\n  return Array.from(g).reverse();\n}\n\nexport function* directedGenerator<T>(\n  g: Generator<T>,\n  direction: IterationDirection,\n): Generator<T> {\n  direction === IterationDirection.Backwards\n    ? yield* reverseGenerator(g)\n    : yield* g;\n}\n\nexport function* reverseGenerator<T>(g: Generator<T>): Generator<T> {\n  for (const t of Array.from(g).reverse()) {\n    yield t;\n  }\n}\n", "export const MAX_INT = 0x7fffffff; // 2^32-1, the max value for signed 32-bit ints.\nexport const MAX_INT_DESCRIPTION = \"2^31 - 1\";\nexport const MIN_INT = -0x80000000;\nexport const MINT_INT_DESCRIPTION = \"-2^31\";\n", "import { Alg } from \"./Alg\";\nimport type { Unit } from \"./units/Unit\";\n\nexport class AlgBuilder {\n  #units: Unit[] = [];\n\n  push(u: Unit): void {\n    this.#units.push(u);\n  }\n\n  // TODO: Allow FlexibleAlgSource?\n  /** @deprecated */\n  experimentalPushAlg(alg: Alg): void {\n    // TODO: Optimize?\n    for (const u of alg.units()) {\n      this.push(u);\n    }\n  }\n\n  // TODO: can we guarantee this to be fast in the permanent API?\n  experimentalNumUnits(): number {\n    return this.#units.length;\n  }\n\n  // can be called multiple times, even if you push units inbetween.\n  toAlg(): Alg {\n    return new Alg(this.#units);\n  }\n\n  reset(): void {\n    this.#units = [];\n  }\n}\n", "import { Alg, experimentalEnsureAlg, FlexibleAlgSource } from \"../../Alg\";\nimport { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport type { LeafUnit } from \"../Unit\";\n\nexport class Commutator extends AlgCommon<Commutator> {\n  readonly #A: Alg;\n  readonly #B: Alg;\n\n  constructor(aSource: FlexibleAlgSource, bSource: FlexibleAlgSource) {\n    super();\n    this.#A = experimentalEnsureAlg(aSource);\n    this.#B = experimentalEnsureAlg(bSource);\n  }\n\n  get A(): Alg {\n    return this.#A;\n  }\n\n  get B(): Alg {\n    return this.#B;\n  }\n\n  isIdentical(other: Comparable): boolean {\n    const otherAsCommutator = other.as(Commutator);\n    return !!(\n      otherAsCommutator?.A.isIdentical(this.A) &&\n      otherAsCommutator?.B.isIdentical(this.B)\n    );\n  }\n\n  invert(): Commutator {\n    return new Commutator(this.#B, this.#A);\n  }\n\n  *experimentalExpand(\n    iterDir: IterationDirection = IterationDirection.Forwards,\n    depth?: number,\n  ): Generator<LeafUnit> {\n    depth ??= Infinity;\n    if (depth === 0) {\n      yield iterDir === IterationDirection.Forwards ? this : this.invert();\n    } else {\n      if (iterDir === IterationDirection.Forwards) {\n        yield* this.A.experimentalExpand(\n          IterationDirection.Forwards,\n          depth - 1,\n        );\n        yield* this.B.experimentalExpand(\n          IterationDirection.Forwards,\n          depth - 1,\n        );\n        yield* this.A.experimentalExpand(\n          IterationDirection.Backwards,\n          depth - 1,\n        );\n        yield* this.B.experimentalExpand(\n          IterationDirection.Backwards,\n          depth - 1,\n        );\n      } else {\n        yield* this.B.experimentalExpand(\n          IterationDirection.Forwards,\n          depth - 1,\n        );\n        yield* this.A.experimentalExpand(\n          IterationDirection.Forwards,\n          depth - 1,\n        );\n        yield* this.B.experimentalExpand(\n          IterationDirection.Backwards,\n          depth - 1,\n        );\n        yield* this.A.experimentalExpand(\n          IterationDirection.Backwards,\n          depth - 1,\n        );\n      }\n    }\n  }\n\n  toString(): string {\n    return `[${this.#A.toString()}, ${this.#B.toString()}]`;\n  }\n}\n", "import { Alg, experimentalEnsureAlg, FlexibleAlgSource } from \"../../Alg\";\nimport { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport type { LeafUnit } from \"../Unit\";\n\nexport class Conjugate extends AlgCommon<Conjugate> {\n  readonly #A: Alg;\n  readonly #B: Alg;\n\n  constructor(aSource: FlexibleAlgSource, bSource: FlexibleAlgSource) {\n    super();\n    this.#A = experimentalEnsureAlg(aSource);\n    this.#B = experimentalEnsureAlg(bSource);\n  }\n\n  get A(): Alg {\n    return this.#A;\n  }\n\n  get B(): Alg {\n    return this.#B;\n  }\n\n  isIdentical(other: Comparable): boolean {\n    const otherAsConjugate = other.as(Conjugate);\n    return !!(\n      otherAsConjugate?.A.isIdentical(this.A) &&\n      otherAsConjugate?.B.isIdentical(this.B)\n    );\n  }\n\n  invert(): Conjugate {\n    return new Conjugate(this.#A, this.#B.invert());\n  }\n\n  *experimentalExpand(\n    iterDir: IterationDirection,\n    depth?: number,\n  ): Generator<LeafUnit> {\n    depth ??= Infinity;\n    if (depth === 0) {\n      yield iterDir === IterationDirection.Forwards ? this : this.invert();\n    } else {\n      yield* this.A.experimentalExpand(IterationDirection.Forwards, depth - 1);\n      yield* this.B.experimentalExpand(iterDir, depth - 1);\n      yield* this.A.experimentalExpand(IterationDirection.Backwards, depth - 1);\n    }\n  }\n\n  toString(): string {\n    return `[${this.A}: ${this.B}]`;\n  }\n}\n", "import { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport type { LeafUnit } from \"../Unit\";\n\n// TODO: hash\n// TODO: this conflicts with the HTML `LineComment` class\nexport class LineComment extends AlgCommon<LineComment> {\n  readonly #text: string;\n\n  constructor(commentText: string) {\n    super();\n    if (commentText.includes(\"\\n\") || commentText.includes(\"\\r\")) {\n      throw new Error(\"LineComment cannot contain newline\");\n    }\n    this.#text = commentText;\n  }\n\n  get text(): string {\n    return this.#text;\n  }\n\n  isIdentical(other: Comparable): boolean {\n    const otherAsLineComment = other as LineComment;\n    return other.is(LineComment) && this.#text === otherAsLineComment.#text;\n  }\n\n  invert(): LineComment {\n    return this;\n  }\n\n  *experimentalExpand(\n    _iterDir: IterationDirection = IterationDirection.Forwards,\n    _depth: number = Infinity,\n  ): Generator<LeafUnit> {\n    yield this;\n  }\n\n  toString(): string {\n    return `//${this.#text}`;\n  }\n\n  // toJSON(): LineCommentJSON {\n  //   return {\n  //     type: \"comment\",\n  //     text: this.#text,\n  //   };\n  // }\n}\n", "import { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport type { LeafUnit } from \"../Unit\";\n\nexport class Newline extends AlgCommon<Newline> {\n  toString(): string {\n    return `\\n`;\n  }\n\n  isIdentical(other: Comparable): boolean {\n    return other.is(Newline);\n  }\n\n  invert(): Newline {\n    return this;\n  }\n\n  *experimentalExpand(\n    _iterDir: IterationDirection = IterationDirection.Forwards,\n    _depth: number = Infinity,\n  ): Generator<LeafUnit> {\n    yield this;\n  }\n}\n", "import { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport type { LeafUnit } from \"../Unit\";\n\nexport class Pause extends AlgCommon<Pause> {\n  toString(): string {\n    return `.`;\n  }\n\n  isIdentical(other: Comparable): boolean {\n    return other.is(Pause);\n  }\n\n  invert(): Pause {\n    return this;\n  }\n\n  *experimentalExpand(\n    _iterDir: IterationDirection = IterationDirection.Forwards,\n    _depth: number = Infinity,\n  ): Generator<LeafUnit> {\n    yield this;\n  }\n}\n", "import { Alg } from \"./Alg\";\nimport { AlgBuilder } from \"./AlgBuilder\";\nimport type { Unit } from \"./units\";\nimport { Commutator } from \"./units/containers/Commutator\";\nimport { Conjugate } from \"./units/containers/Conjugate\";\nimport { Grouping } from \"./units/containers/Grouping\";\nimport { LineComment } from \"./units/leaves/LineComment\";\nimport { Move, QuantumMove } from \"./units/leaves/Move\";\nimport { Newline } from \"./units/leaves/Newline\";\nimport { Pause } from \"./units/leaves/Pause\";\n\ntype StoppingChar = \",\" | \":\" | \"]\" | \")\";\n\nfunction parseIntWithEmptyFallback<T>(n: string, emptyFallback: T): number | T {\n  return n ? parseInt(n) : emptyFallback;\n}\n\nconst amountRegex = /^(\\d+)?('?)/;\nconst moveStartRegex = /^[_\\dA-Za-z]/; // TODO: Handle slash\nconst quantumMoveRegex = /^((([1-9]\\d*)-)?([1-9]\\d*))?([_A-Za-z]+)?/;\nconst commentTextRegex = /^[^\\n]*/;\nconst square1PairStart = /^(-?\\d+), ?/; // TODO: match up with other whitespace handling?\nconst square1PairEnd = /^(-?\\d+)\\)/; // TODO: match up with other whitespace handling?\n\nexport function parseAlg(s: string): Alg {\n  return new AlgParser().parseAlg(s);\n}\n\nexport function parseMove(s: string): Move {\n  return new AlgParser().parseMove(s);\n}\n\nexport function parseQuantumMove(s: string): QuantumMove {\n  return new AlgParser().parseQuantumMove(s);\n}\n\nexport interface ParserIndexed {\n  startCharIndex: number;\n  endCharIndex: number;\n}\n\nexport type Parsed<T extends Alg | Unit> = T & ParserIndexed;\n\n// TODO: attach to parser so the end char index can default to `this.#idx`?\nfunction addCharIndices<T extends Alg | Unit>(\n  t: T,\n  startCharIndex: number,\n  endCharIndex: number,\n): Parsed<T> {\n  const parsedT = t as ParserIndexed & T;\n  parsedT.startCharIndex = startCharIndex;\n  parsedT.endCharIndex = endCharIndex;\n  return parsedT;\n}\n\nexport function transferCharIndex<T extends Alg | Unit>(from: T, to: T): T {\n  if (\"startCharIndex\" in from) {\n    (to as Parsed<T>).startCharIndex = (from as Parsed<T>).startCharIndex;\n  }\n  if (\"endCharIndex\" in from) {\n    (to as Parsed<T>).endCharIndex = (from as Parsed<T>).endCharIndex;\n  }\n  return to;\n}\n\ntype MoveSuffix = \"+\" | \"++\" | \"-\" | \"--\";\n\n// TODO: support recording string locations for moves.\nclass AlgParser {\n  #input: string = \"\";\n  #idx: number = 0;\n\n  parseAlg(input: string): Parsed<Alg> {\n    this.#input = input;\n    this.#idx = 0;\n    const alg = this.parseAlgWithStopping([]);\n    this.mustBeAtEndOfInput();\n    return alg;\n  }\n\n  parseMove(input: string): Parsed<Move> {\n    this.#input = input;\n    this.#idx = 0;\n    const move = this.parseMoveImpl();\n    this.mustBeAtEndOfInput();\n    return move;\n  }\n\n  parseQuantumMove(input: string): QuantumMove {\n    this.#input = input;\n    this.#idx = 0;\n    const quantumMove = this.parseQuantumMoveImpl();\n    this.mustBeAtEndOfInput();\n    return quantumMove;\n  }\n\n  private mustBeAtEndOfInput() {\n    if (this.#idx !== this.#input.length) {\n      throw new Error(\"parsing unexpectedly ended early\");\n    }\n  }\n\n  private parseAlgWithStopping(stopBefore: StoppingChar[]): Parsed<Alg> {\n    let algStartIdx = this.#idx;\n    let algEndIdx = this.#idx;\n    const algBuilder = new AlgBuilder();\n\n    // We're \"crowded\" if there was not a space or newline since the last unit.\n    let crowded = false;\n\n    const mustNotBeCrowded = (idx: number): void => {\n      if (crowded) {\n        throw new Error(\n          `Unexpected character at index ${idx}. Are you missing a space?`,\n        ); // TODO better error message\n      }\n    };\n\n    mainLoop: while (this.#idx < this.#input.length) {\n      const savedCharIndex = this.#idx;\n      if ((stopBefore as string[]).includes(this.#input[this.#idx])) {\n        return addCharIndices(algBuilder.toAlg(), algStartIdx, algEndIdx);\n      }\n      if (this.tryConsumeNext(\" \")) {\n        crowded = false;\n        if (algBuilder.experimentalNumUnits() === 0) {\n          algStartIdx = this.#idx;\n        }\n        continue mainLoop;\n      } else if (moveStartRegex.test(this.#input[this.#idx])) {\n        mustNotBeCrowded(savedCharIndex);\n        const move = this.parseMoveImpl();\n        algBuilder.push(move);\n        crowded = true;\n        algEndIdx = this.#idx;\n        continue mainLoop;\n      } else if (this.tryConsumeNext(\"(\")) {\n        mustNotBeCrowded(savedCharIndex);\n        const sq1PairStartMatch = this.tryRegex(square1PairStart);\n        if (sq1PairStartMatch) {\n          const topAmountString = sq1PairStartMatch[1];\n          const savedCharIndexD = this.#idx;\n          const sq1PairEndMatch = this.parseRegex(square1PairEnd);\n          const uMove = addCharIndices(\n            new Move(new QuantumMove(\"U_SQ_\"), parseInt(topAmountString)),\n            savedCharIndex + 1,\n            savedCharIndex + 1 + topAmountString.length,\n          );\n          const dMove = addCharIndices(\n            new Move(new QuantumMove(\"D_SQ_\"), parseInt(sq1PairEndMatch[1])),\n            savedCharIndexD,\n            this.#idx - 1,\n          );\n          const alg = addCharIndices(\n            new Alg([uMove, dMove]),\n            savedCharIndex + 1,\n            this.#idx - 1,\n          );\n          algBuilder.push(\n            addCharIndices(new Grouping(alg), savedCharIndex, this.#idx),\n          );\n          crowded = true;\n          algEndIdx = this.#idx;\n          continue mainLoop;\n        } else {\n          const alg = this.parseAlgWithStopping([\")\"]);\n          this.mustConsumeNext(\")\");\n          const amount = this.parseAmount();\n          algBuilder.push(\n            addCharIndices(\n              new Grouping(alg, amount),\n              savedCharIndex,\n              this.#idx,\n            ),\n          );\n          crowded = true;\n          algEndIdx = this.#idx;\n          continue mainLoop;\n        }\n      } else if (this.tryConsumeNext(\"[\")) {\n        mustNotBeCrowded(savedCharIndex);\n        const A = this.parseAlgWithStopping([\",\", \":\"]);\n        const separator = this.popNext();\n        const B = this.parseAlgWithStopping([\"]\"]);\n        this.mustConsumeNext(\"]\");\n        switch (separator) {\n          case \":\":\n            algBuilder.push(\n              addCharIndices(new Conjugate(A, B), savedCharIndex, this.#idx),\n            );\n            crowded = true;\n            algEndIdx = this.#idx;\n            continue mainLoop;\n          case \",\":\n            algBuilder.push(\n              addCharIndices(new Commutator(A, B), savedCharIndex, this.#idx),\n            );\n            crowded = true;\n            algEndIdx = this.#idx;\n            continue mainLoop;\n          default:\n            throw \"unexpected parsing error\";\n        }\n      } else if (this.tryConsumeNext(\"\\n\")) {\n        algBuilder.push(\n          addCharIndices(new Newline(), savedCharIndex, this.#idx),\n        );\n        crowded = false;\n        algEndIdx = this.#idx;\n        continue mainLoop;\n      } else if (this.tryConsumeNext(\"/\")) {\n        if (this.tryConsumeNext(\"/\")) {\n          mustNotBeCrowded(savedCharIndex);\n          const [text] = this.parseRegex(commentTextRegex);\n          algBuilder.push(\n            addCharIndices(new LineComment(text), savedCharIndex, this.#idx),\n          );\n          crowded = false;\n          algEndIdx = this.#idx;\n          continue mainLoop;\n        } else {\n          // We allow crowding here to account for csTimer scrambles, which don't have a space between a Square-1 tuple and the following slash.\n          algBuilder.push(\n            addCharIndices(new Move(\"_SLASH_\"), savedCharIndex, this.#idx),\n          );\n          crowded = true;\n          algEndIdx = this.#idx;\n          continue mainLoop;\n        }\n      } else if (this.tryConsumeNext(\".\")) {\n        mustNotBeCrowded(savedCharIndex);\n        algBuilder.push(addCharIndices(new Pause(), savedCharIndex, this.#idx));\n        crowded = true;\n        algEndIdx = this.#idx;\n        continue mainLoop;\n      } else {\n        throw new Error(`Unexpected character: ${this.popNext()}`);\n      }\n    }\n\n    if (this.#idx !== this.#input.length) {\n      throw new Error(\"did not finish parsing?\");\n    }\n    if (stopBefore.length > 0) {\n      throw new Error(\"expected stopping\");\n    }\n    return addCharIndices(algBuilder.toAlg(), algStartIdx, algEndIdx);\n  }\n\n  private parseQuantumMoveImpl(): QuantumMove {\n    const [, , , outerLayerStr, innerLayerStr, family] =\n      this.parseRegex(quantumMoveRegex);\n\n    return new QuantumMove(\n      family,\n      parseIntWithEmptyFallback(innerLayerStr, undefined),\n      parseIntWithEmptyFallback(outerLayerStr, undefined),\n    );\n  }\n\n  private parseMoveImpl(): Parsed<Move> {\n    const savedCharIndex = this.#idx;\n\n    if (this.tryConsumeNext(\"/\")) {\n      return addCharIndices(new Move(\"_SLASH_\"), savedCharIndex, this.#idx);\n    }\n\n    let quantumMove = this.parseQuantumMoveImpl();\n    // Only `hadEmptyAbsAmount` is `const`.\n    // eslint-disable-next-line prefer-const\n    let [amount, hadEmptyAbsAmount] = this.parseAmountAndTrackEmptyAbsAmount();\n    const suffix = this.parseMoveSuffix();\n\n    if (suffix) {\n      if (amount < 0) {\n        throw new Error(\"uh-oh\");\n      }\n      if ((suffix === \"++\" || suffix === \"--\") && amount !== 1) {\n        // TODO: Handle 1 vs. null\n        throw new Error(\n          \"Pochmann ++ or -- moves cannot have an amount other than 1.\",\n        );\n      }\n      if ((suffix === \"++\" || suffix === \"--\") && !hadEmptyAbsAmount) {\n        throw new Error(\n          \"Pochmann ++ or -- moves cannot have an amount written as a number.\",\n        );\n      }\n      if ((suffix === \"+\" || suffix === \"-\") && hadEmptyAbsAmount) {\n        throw new Error(\n          \"Clock dial moves must have an amount written as a natural number followed by + or -.\",\n        );\n      }\n      if (suffix.startsWith(\"+\")) {\n        quantumMove = quantumMove.modified({\n          family: `${quantumMove.family}_${\n            suffix === \"+\" ? \"PLUS\" : \"PLUSPLUS\"\n          }_`, // TODO\n        });\n      }\n      if (suffix.startsWith(\"-\")) {\n        quantumMove = quantumMove.modified({\n          family: `${quantumMove.family}_${\n            suffix === \"-\" ? \"PLUS\" : \"PLUSPLUS\"\n          }_`, // TODO\n        });\n        amount *= -1;\n      }\n    }\n\n    const move = addCharIndices(\n      new Move(quantumMove, amount),\n      savedCharIndex,\n      this.#idx,\n    );\n    return move;\n  }\n\n  private parseMoveSuffix(): MoveSuffix | null {\n    if (this.tryConsumeNext(\"+\")) {\n      if (this.tryConsumeNext(\"+\")) {\n        return \"++\";\n      }\n      return \"+\";\n    }\n    if (this.tryConsumeNext(\"-\")) {\n      if (this.tryConsumeNext(\"-\")) {\n        return \"--\";\n      }\n      return \"-\";\n    }\n    return null;\n  }\n\n  private parseAmountAndTrackEmptyAbsAmount(): [number, boolean] {\n    const savedIdx = this.#idx;\n    const [, absAmountStr, primeStr] = this.parseRegex(amountRegex);\n    if (absAmountStr?.startsWith(\"0\") && absAmountStr !== \"0\") {\n      throw new Error(\n        `Error at char index ${savedIdx}: An amount can only start with 0 if it's exactly the digit 0.`,\n      );\n    }\n    return [\n      parseIntWithEmptyFallback(absAmountStr, 1) * (primeStr === \"'\" ? -1 : 1),\n      !absAmountStr,\n    ];\n  }\n\n  private parseAmount(): number {\n    const savedIdx = this.#idx;\n    const [, absAmountStr, primeStr] = this.parseRegex(amountRegex);\n    if (absAmountStr?.startsWith(\"0\") && absAmountStr !== \"0\") {\n      throw new Error(\n        `Error at char index ${savedIdx}: An amount number can only start with 0 if it's exactly the digit 0.`,\n      );\n    }\n    return (\n      parseIntWithEmptyFallback(absAmountStr, 1) * (primeStr === \"'\" ? -1 : 1)\n    );\n  }\n\n  private parseRegex(regex: RegExp): RegExpExecArray {\n    const arr = regex.exec(this.remaining());\n    if (arr === null) {\n      throw new Error(\"internal parsing error\"); // TODO\n    }\n    this.#idx += arr[0].length;\n    return arr;\n  }\n\n  // TOD: can we avoid this?\n  private tryRegex(regex: RegExp): RegExpExecArray | null {\n    const arr = regex.exec(this.remaining());\n    if (arr === null) {\n      return null;\n    }\n    this.#idx += arr[0].length;\n    return arr;\n  }\n\n  private remaining(): string {\n    return this.#input.slice(this.#idx);\n  }\n\n  private popNext(): string {\n    const next = this.#input[this.#idx];\n    this.#idx++;\n    return next;\n  }\n\n  private tryConsumeNext(expected: string): boolean {\n    if (this.#input[this.#idx] === expected) {\n      this.#idx++;\n      return true;\n    }\n    return false;\n  }\n\n  private mustConsumeNext(expected: string): string {\n    const next = this.popNext();\n    if (next !== expected) {\n      throw new Error(\n        `expected \\`${expected}\\` while parsing, encountered ${next}`,\n      ); // TODO: be more helpful\n    }\n    return next;\n  }\n}\n", "const warned = new Set<string>();\nexport function warnOnce(s: string): void {\n  if (!warned.has(s)) {\n    console.warn(s);\n    warned.add(s);\n  }\n}\n", "import type { Repeatable } from \"../common\";\nimport { IterationDirection, toggleDirection } from \"../iteration\";\nimport { MAX_INT, MAX_INT_DESCRIPTION, MIN_INT } from \"../limits\";\nimport type { LeafUnit } from \"./Unit\";\n\nexport class QuantumWithAmount<Q extends Repeatable> {\n  readonly quantum: Q;\n  readonly amount: number;\n\n  constructor(quantum: Q, amount: number = 1) {\n    this.quantum = quantum;\n    this.amount = amount;\n\n    if (\n      !Number.isInteger(this.amount) ||\n      this.amount < MIN_INT ||\n      this.amount > MAX_INT\n    ) {\n      throw new Error(\n        `Unit amount absolute value must be a non-negative integer from ${MAX_INT_DESCRIPTION} to ${MAX_INT_DESCRIPTION}.`,\n      );\n    }\n  }\n\n  suffix(): string {\n    let s: string = \"\";\n    // TODO\n    const absAmount = Math.abs(this.amount);\n    if (absAmount !== 1) {\n      s += absAmount;\n    }\n    if (this.amount < 0) {\n      s += \"'\";\n    }\n    return s;\n  }\n\n  isIdentical(other: QuantumWithAmount<Q>): boolean {\n    return (\n      this.quantum.isIdentical(other.quantum) && this.amount === other.amount\n    );\n  }\n\n  // TODO: `Conjugate` and `Commutator` decrement `depth` inside the quantum, `Grouping` has to do it outside the quantum.\n  *experimentalExpand(\n    iterDir: IterationDirection,\n    depth: number,\n  ): Generator<LeafUnit> {\n    const absAmount = Math.abs(this.amount);\n    const newIterDir = toggleDirection(iterDir, this.amount < 0);\n    for (let i = 0; i < absAmount; i++) {\n      yield* this.quantum.experimentalExpand(newIterDir, depth);\n    }\n  }\n}\n", "import { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport { MAX_INT, MAX_INT_DESCRIPTION } from \"../../limits\";\nimport { parseMove, parseQuantumMove, transferCharIndex } from \"../../parse\";\nimport { warnOnce } from \"../../warnOnce\";\nimport { QuantumWithAmount } from \"../QuantumWithAmount\";\nimport type { LeafUnit } from \"../Unit\";\n\ninterface QuantumMoveModifications {\n  outerLayer?: number;\n  innerLayer?: number;\n  family?: string;\n}\n\nexport class QuantumMove extends Comparable {\n  readonly #family: string;\n  readonly #innerLayer: number | null;\n  readonly #outerLayer: number | null;\n\n  constructor(\n    family: string,\n    innerLayer?: number | null,\n    outerLayer?: number | null,\n  ) {\n    super();\n    this.#family = family;\n    this.#innerLayer = innerLayer ?? null;\n    this.#outerLayer = outerLayer ?? null;\n    Object.freeze(this);\n\n    if (\n      this.#innerLayer !== null &&\n      (!Number.isInteger(this.#innerLayer) ||\n        this.#innerLayer < 1 ||\n        this.#innerLayer > MAX_INT)\n    ) {\n      throw new Error(\n        `QuantumMove inner layer must be a positive integer below ${MAX_INT_DESCRIPTION}.`,\n      );\n    }\n\n    if (\n      this.#outerLayer !== null &&\n      (!Number.isInteger(this.#outerLayer) ||\n        this.#outerLayer < 1 ||\n        this.#outerLayer > MAX_INT)\n    ) {\n      throw new Error(\n        `QuantumMove outer layer must be a positive integer below ${MAX_INT_DESCRIPTION}.`,\n      );\n    }\n\n    if (\n      this.#outerLayer !== null &&\n      this.#innerLayer !== null &&\n      this.#innerLayer <= this.#outerLayer\n    ) {\n      throw new Error(\n        \"QuantumMove outer layer must be smaller than inner layer.\",\n      );\n    }\n\n    if (this.#outerLayer !== null && this.#innerLayer === null) {\n      throw new Error(\n        \"QuantumMove with an outer layer must have an inner layer\",\n      ); // TODO: test\n    }\n  }\n\n  static fromString(s: string): QuantumMove {\n    return parseQuantumMove(s);\n  }\n\n  // TODO: `modify`?\n  modified(modifications: QuantumMoveModifications): QuantumMove {\n    return new QuantumMove(\n      modifications.family ?? this.#family,\n      modifications.innerLayer ?? this.#innerLayer,\n      modifications.outerLayer ?? this.#outerLayer,\n    );\n  }\n\n  isIdentical(other: QuantumMove): boolean {\n    const otherAsQuantumMove = other;\n    return (\n      other.is(QuantumMove) &&\n      this.#family === otherAsQuantumMove.#family &&\n      this.#innerLayer === otherAsQuantumMove.#innerLayer &&\n      this.#outerLayer === otherAsQuantumMove.#outerLayer\n    );\n  }\n\n  // TODO: provide something more useful on average.\n  /** @deprecated */\n  get family(): string {\n    return this.#family;\n  }\n\n  // TODO: provide something more useful on average.\n  /** @deprecated */\n  get outerLayer(): number | null {\n    return this.#outerLayer;\n  }\n\n  // TODO: provide something more useful on average.\n  /** @deprecated */\n  get innerLayer(): number | null {\n    return this.#innerLayer;\n  }\n\n  experimentalExpand(): Generator<LeafUnit> {\n    throw new Error(\n      \"experimentalExpand() cannot be called on a `QuantumMove` directly.\",\n    );\n  }\n\n  toString(): string {\n    let s = this.#family;\n    if (this.#innerLayer !== null) {\n      s = String(this.#innerLayer) + s;\n      if (this.#outerLayer !== null) {\n        s = String(this.#outerLayer) + \"-\" + s;\n      }\n    }\n    return s;\n  }\n}\n\nexport interface MoveModifications {\n  outerLayer?: number;\n  innerLayer?: number;\n  family?: string;\n  amount?: number;\n}\n\nexport class Move extends AlgCommon<Move> {\n  readonly #quantumWithAmount: QuantumWithAmount<QuantumMove>;\n\n  constructor(\n    ...args: [QuantumMove] | [QuantumMove, number] | [string] | [string, number]\n  ) {\n    super();\n    if (typeof args[0] === \"string\") {\n      if (args[1] ?? null) {\n        this.#quantumWithAmount = new QuantumWithAmount(\n          QuantumMove.fromString(args[0]),\n          args[1],\n        );\n        return;\n      } else {\n        return Move.fromString(args[0]); // TODO: can we return here?\n      }\n    }\n    this.#quantumWithAmount = new QuantumWithAmount<QuantumMove>(\n      args[0],\n      args[1],\n    );\n  }\n\n  isIdentical(other: Comparable): boolean {\n    const otherAsMove = other.as(Move);\n    return (\n      !!otherAsMove &&\n      this.#quantumWithAmount.isIdentical(otherAsMove.#quantumWithAmount)\n    );\n  }\n\n  invert(): Move {\n    // TODO: handle char indices more consistently among units.\n    return transferCharIndex(\n      this,\n      new Move(this.#quantumWithAmount.quantum, -this.amount),\n    );\n  }\n\n  *experimentalExpand(\n    iterDir: IterationDirection = IterationDirection.Forwards,\n  ): Generator<LeafUnit> {\n    if (iterDir === IterationDirection.Forwards) {\n      yield this;\n    } else {\n      yield this.modified({\n        amount: -this.amount,\n      });\n    }\n  }\n\n  get quantum(): QuantumMove {\n    return this.#quantumWithAmount.quantum;\n  }\n\n  // TODO: `modify`?\n  modified(modifications: MoveModifications): Move {\n    // TODO: Avoid creating a new quantum move\n    return new Move(\n      this.#quantumWithAmount.quantum.modified(modifications),\n      modifications.amount ?? this.amount,\n    );\n  }\n\n  static fromString(s: string): Move {\n    return parseMove(s);\n  }\n\n  get amount(): number {\n    return this.#quantumWithAmount.amount;\n  }\n\n  /** @deprecated */\n  get type(): string {\n    warnOnce(\"deprecated: type\");\n    return \"blockMove\";\n  }\n\n  /** @deprecated */\n  get family(): string {\n    return this.#quantumWithAmount.quantum.family ?? undefined;\n  }\n\n  /** @deprecated */\n  get outerLayer(): number | undefined {\n    return this.#quantumWithAmount.quantum.outerLayer ?? undefined;\n  }\n\n  /** @deprecated */\n  get innerLayer(): number | undefined {\n    return this.#quantumWithAmount.quantum.innerLayer ?? undefined;\n  }\n\n  toString(): string {\n    if (this.family === \"_SLASH_\") {\n      return \"/\"; // TODO: validate no amount\n    }\n    if (this.family.endsWith(\"_PLUS_\")) {\n      return (\n        this.#quantumWithAmount.quantum.toString().slice(0, -6) +\n        Math.abs(this.amount) +\n        (this.amount < 0 ? \"-\" : \"+\")\n      ); // TODO\n    }\n    if (this.family.endsWith(\"_PLUSPLUS_\")) {\n      const absAmount = Math.abs(this.amount);\n      return (\n        this.#quantumWithAmount.quantum.toString().slice(0, -10) +\n        (absAmount === 1 ? \"\" : absAmount) +\n        (this.amount < 0 ? \"--\" : \"++\")\n      ); // TODO\n    }\n\n    return (\n      this.#quantumWithAmount.quantum.toString() +\n      this.#quantumWithAmount.suffix()\n    );\n  }\n\n  // // TODO: Serialize as a string?\n  // toJSON(): MoveJSON {\n  //   return {\n  //     type: \"move\",\n  //     family: this.family,\n  //     innerLayer: this.innerLayer,\n  //     outerLayer: this.outerLayer,\n  //   };\n  // }\n}\n", "import { Alg, experimentalEnsureAlg, FlexibleAlgSource } from \"../../Alg\";\nimport { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport { Move, QuantumMove } from \"../leaves/Move\";\nimport { QuantumWithAmount } from \"../QuantumWithAmount\";\nimport type { LeafUnit } from \"../Unit\";\n\n// This is a workaround for `jest`, which doesn't handle cycles of imports inside `cubing/alg`.\n// We need to lazy-initialize the reusable quantum moves for Square-1, so we create this wrapper for it.\nclass Square1TupleFormatter {\n  quantumU_SQ_: QuantumMove | null = null;\n  quantumD_SQ_: QuantumMove | null = null;\n\n  format(grouping: Grouping): string | null {\n    const amounts = this.tuple(grouping);\n    if (!amounts) {\n      return null;\n    }\n    return `(${amounts.map((move) => move.amount).join(\", \")})`;\n  }\n\n  tuple(grouping: Grouping): [moveU: Move, moveD: Move] | null {\n    this.quantumU_SQ_ ||= new QuantumMove(\"U_SQ_\");\n    this.quantumD_SQ_ ||= new QuantumMove(\"D_SQ_\");\n\n    const quantumAlg = grouping.alg;\n    if (quantumAlg.experimentalNumUnits() === 2) {\n      const [U, D] = quantumAlg.units();\n      if (\n        U.as(Move)?.quantum.isIdentical(this.quantumU_SQ_) &&\n        D.as(Move)?.quantum.isIdentical(this.quantumD_SQ_)\n      ) {\n        if (grouping.amount !== 1) {\n          throw new Error(\n            \"Square-1 tuples cannot have an amount other than 1.\",\n          );\n        }\n        return [U as Move, D as Move]; // TODO: can we reuse the casting from above?\n      }\n    }\n    return null;\n  }\n}\nconst square1TupleFormatterInstance = new Square1TupleFormatter();\n\nexport class Grouping extends AlgCommon<Grouping> {\n  readonly #quantumWithAmount: QuantumWithAmount<Alg>;\n\n  constructor(algSource: FlexibleAlgSource, amount?: number) {\n    super();\n    const alg = experimentalEnsureAlg(algSource);\n    this.#quantumWithAmount = new QuantumWithAmount(alg, amount);\n  }\n\n  isIdentical(other: Comparable): boolean {\n    const otherAsGrouping = other as Grouping;\n    return (\n      other.is(Grouping) &&\n      this.#quantumWithAmount.isIdentical(otherAsGrouping.#quantumWithAmount)\n    );\n  }\n\n  get alg(): Alg {\n    return this.#quantumWithAmount.quantum;\n  }\n\n  get amount(): number {\n    return this.#quantumWithAmount.amount;\n  }\n\n  /** @deprecated */\n  get experimentalRepetitionSuffix(): string {\n    return this.#quantumWithAmount.suffix();\n  }\n\n  invert(): Grouping {\n    return new Grouping(\n      this.#quantumWithAmount.quantum,\n      -this.#quantumWithAmount.amount,\n    );\n  }\n\n  *experimentalExpand(\n    iterDir: IterationDirection = IterationDirection.Forwards,\n    depth?: number,\n  ): Generator<LeafUnit> {\n    depth ??= Infinity;\n    if (depth === 0) {\n      yield iterDir === IterationDirection.Forwards ? this : this.invert();\n    } else {\n      yield* this.#quantumWithAmount.experimentalExpand(iterDir, depth - 1);\n    }\n  }\n\n  static fromString(): Grouping {\n    throw new Error(\"unimplemented\");\n  }\n\n  toString(): string {\n    return (\n      square1TupleFormatterInstance.format(this) ??\n      `(${this.#quantumWithAmount.quantum.toString()})${this.#quantumWithAmount.suffix()}`\n    );\n  }\n\n  experimentalAsSquare1Tuple(): [moveU: Move, moveD: Move] | null {\n    return square1TupleFormatterInstance.tuple(this);\n  }\n\n  // toJSON(): GroupingJSON {\n  //   return {\n  //     type: \"grouping\",\n  //     alg: this.#quanta.quantum.toJSON(),\n  //   };\n  // }\n}\n", "import type { Alg } from \"./Alg\";\nimport {\n  Commutator,\n  Conjugate,\n  Grouping,\n  LineComment,\n  Move,\n  Newline,\n  Pause,\n} from \"./units\";\n\nexport function experimentalIs(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  v: any,\n  c:\n    | typeof Alg\n    | typeof Grouping\n    | typeof LineComment\n    | typeof Commutator\n    | typeof Conjugate\n    | typeof Move\n    | typeof Newline\n    | typeof Pause,\n): boolean {\n  return v instanceof c;\n}\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function experimentalIsUnit(v: any): boolean {\n  return (\n    experimentalIs(v, Grouping) ||\n    experimentalIs(v, LineComment) ||\n    experimentalIs(v, Commutator) ||\n    experimentalIs(v, Conjugate) ||\n    experimentalIs(v, Move) ||\n    experimentalIs(v, Newline) ||\n    experimentalIs(v, Pause)\n  );\n}\n", "import type { Alg } from \"./Alg\";\nimport { Grouping } from \"./units/containers/Grouping\";\nimport type { Comparable } from \"./common\";\nimport { Commutator } from \"./units/containers/Commutator\";\nimport { Move, QuantumMove } from \"./units/leaves/Move\";\nimport { Newline } from \"./units/leaves/Newline\";\nimport { Pause } from \"./units/leaves/Pause\";\nimport { Conjugate } from \"./units/containers/Conjugate\";\nimport { LineComment } from \"./units/leaves/LineComment\";\nimport type { Unit } from \"./units/Unit\";\n\nfunction dispatch<DataDown, DataAlgUp, DataUnitUp>(\n  t: TraversalDownUp<DataDown, DataAlgUp, DataUnitUp>,\n  unit: Unit,\n  dataDown: DataDown,\n): DataUnitUp {\n  // TODO: Can we turn this back into a `switch` or something more efficiently?\n  if (unit.is(Grouping)) {\n    return t.traverseGrouping(unit as Grouping, dataDown);\n  }\n  if (unit.is(Move)) {\n    return t.traverseMove(unit as Move, dataDown);\n  }\n  if (unit.is(Commutator)) {\n    return t.traverseCommutator(unit as Commutator, dataDown);\n  }\n  if (unit.is(Conjugate)) {\n    return t.traverseConjugate(unit as Conjugate, dataDown);\n  }\n  if (unit.is(Pause)) {\n    return t.traversePause(unit as Pause, dataDown);\n  }\n  if (unit.is(Newline)) {\n    return t.traverseNewline(unit as Newline, dataDown);\n  }\n  if (unit.is(LineComment)) {\n    return t.traverseLineComment(unit as LineComment, dataDown);\n  }\n  throw new Error(`unknown unit`);\n}\n\nfunction assertIsUnit(t: Comparable): Unit {\n  if (\n    t.is(Grouping) ||\n    t.is(Move) ||\n    t.is(Commutator) ||\n    t.is(Conjugate) ||\n    t.is(Pause) ||\n    t.is(Newline) ||\n    t.is(LineComment)\n  ) {\n    return t as Unit;\n  }\n  throw \"internal error: expected unit\"; // TODO: Make more helpful, add tests\n}\n\nexport abstract class TraversalDownUp<\n  DataDown,\n  DataAlgUp,\n  DataUnitUp = DataAlgUp,\n> {\n  // Immediate subclasses should overwrite this.\n  public traverseUnit(unit: Unit, dataDown: DataDown): DataUnitUp {\n    return dispatch(this, unit, dataDown);\n  }\n\n  public traverseIntoUnit(unit: Unit, dataDown: DataDown): Unit {\n    return assertIsUnit(this.traverseUnit(unit, dataDown) as any);\n  }\n\n  public abstract traverseAlg(alg: Alg, dataDown: DataDown): DataAlgUp;\n\n  public abstract traverseGrouping(\n    grouping: Grouping,\n    dataDown: DataDown,\n  ): DataUnitUp;\n\n  public abstract traverseMove(move: Move, dataDown: DataDown): DataUnitUp;\n\n  public abstract traverseCommutator(\n    commutator: Commutator,\n    dataDown: DataDown,\n  ): DataUnitUp;\n\n  public abstract traverseConjugate(\n    conjugate: Conjugate,\n    dataDown: DataDown,\n  ): DataUnitUp;\n\n  public abstract traversePause(pause: Pause, dataDown: DataDown): DataUnitUp;\n  public abstract traverseNewline(\n    newline: Newline,\n    dataDown: DataDown,\n  ): DataUnitUp;\n\n  public abstract traverseLineComment(\n    comment: LineComment,\n    dataDown: DataDown,\n  ): DataUnitUp;\n}\n\nexport abstract class TraversalUp<\n  DataAlgUp,\n  DataUnitUp = DataAlgUp,\n> extends TraversalDownUp<undefined, DataAlgUp, DataUnitUp> {\n  public traverseUnit(unit: Unit): DataUnitUp {\n    return dispatch<unknown, DataAlgUp, DataUnitUp>(this, unit, undefined);\n  }\n\n  public traverseIntoUnit(unit: Unit): Unit {\n    return assertIsUnit(this.traverseUnit(unit) as any);\n  }\n\n  public abstract traverseAlg(alg: Alg): DataAlgUp;\n  public abstract traverseGrouping(grouping: Grouping): DataUnitUp;\n  public abstract traverseMove(move: Move): DataUnitUp;\n  public abstract traverseCommutator(commutator: Commutator): DataUnitUp;\n  public abstract traverseConjugate(conjugate: Conjugate): DataUnitUp;\n  public abstract traversePause(pause: Pause): DataUnitUp;\n  public abstract traverseNewline(newline: Newline): DataUnitUp;\n  public abstract traverseLineComment(comment: LineComment): DataUnitUp;\n}\n\nexport interface SimplifyOptions {\n  collapseMoves?: boolean;\n  quantumMoveOrder?: (quantumMove: QuantumMove) => number;\n  depth?: number | null; // TODO: test\n}\n\n// TODO: Test that inverses are bijections.\nclass Simplify extends TraversalDownUp<SimplifyOptions, Generator<Unit>> {\n  static #newAmount(\n    move: Move,\n    deltaAmount: number,\n    options: SimplifyOptions,\n  ): number {\n    let newAmount = move.amount + deltaAmount;\n    if (options?.quantumMoveOrder) {\n      const order = options.quantumMoveOrder(move.quantum);\n      // Examples:\n      // \u2022 order 4 \u2192 min -1 (e.g. cube)\n      // \u2022 order 5 \u2192 min -2 (e.g. Megaminx)\n      // \u2022 order 3 \u2192 min -1 (e.g. Pyraminx)\n      const min = Math.floor(order / 2) + 1 - order;\n      newAmount = (((newAmount % order) + order - min) % order) + min; // TODO\n    }\n    return newAmount;\n  }\n\n  // TODO: Handle\n  public *traverseAlg(alg: Alg, options: SimplifyOptions): Generator<Unit> {\n    if (options.depth === 0) {\n      yield* alg.units();\n      return;\n    }\n\n    const newUnits: Unit[] = [];\n    let lastUnit: Unit | null = null;\n    const collapseMoves = options?.collapseMoves ?? true;\n    function appendMoveWithNewAmount(move: Move, deltaAmount: number): boolean {\n      const newAmount = Simplify.#newAmount(move, deltaAmount, options);\n      if (newAmount === 0) {\n        return false;\n      }\n      const newMove = new Move(move.quantum, newAmount);\n      newUnits.push(newMove);\n      lastUnit = newMove;\n      return true;\n    }\n    function appendCollapsed(newUnit: Unit) {\n      if (\n        collapseMoves &&\n        lastUnit?.is(Move) &&\n        newUnit.is(Move) &&\n        (lastUnit as Move).quantum.isIdentical((newUnit as Move).quantum)\n      ) {\n        newUnits.pop();\n        if (\n          !appendMoveWithNewAmount(lastUnit as Move, (newUnit as Move).amount)\n        ) {\n          lastUnit = newUnits.slice(-1)[0];\n        }\n      } else {\n        if (newUnit.is(Move)) {\n          appendMoveWithNewAmount(newUnit as Move, 0);\n        } else {\n          newUnits.push(newUnit);\n          lastUnit = newUnit;\n        }\n      }\n    }\n\n    const newOptions = {\n      depth: options.depth ? options.depth - 1 : null,\n    }; // TODO: avoid allocations?\n    for (const unit of alg.units()) {\n      for (const ancestorUnit of this.traverseUnit(unit, newOptions)) {\n        appendCollapsed(ancestorUnit);\n      }\n    }\n    for (const unit of newUnits) {\n      yield unit;\n    }\n  }\n\n  public *traverseGrouping(\n    grouping: Grouping,\n    options: SimplifyOptions,\n  ): Generator<Unit> {\n    if (options.depth === 0) {\n      yield grouping;\n      return;\n    }\n    const newOptions = {\n      depth: options.depth ? options.depth - 1 : null,\n    }; // TODO: avoid allocations?\n    yield new Grouping(this.traverseAlg(grouping.alg, newOptions));\n  }\n\n  public *traverseMove(move: Move, _options: SimplifyOptions): Generator<Unit> {\n    yield move;\n  }\n\n  public *traverseCommutator(\n    commutator: Commutator,\n    options: SimplifyOptions,\n  ): Generator<Unit> {\n    if (options.depth === 0) {\n      yield commutator;\n      return;\n    }\n    const newOptions = {\n      depth: options.depth ? options.depth - 1 : null,\n    }; // TODO: avoid allocations?\n    yield new Commutator(\n      this.traverseAlg(commutator.A, newOptions),\n      this.traverseAlg(commutator.B, newOptions),\n    );\n  }\n\n  public *traverseConjugate(\n    conjugate: Conjugate,\n    options: SimplifyOptions,\n  ): Generator<Unit> {\n    if (options.depth === 0) {\n      yield conjugate;\n      return;\n    }\n    const newOptions = {\n      depth: options.depth ? options.depth - 1 : null,\n    }; // TODO: avoid allocations?\n    yield new Conjugate(\n      this.traverseAlg(conjugate.A, newOptions),\n      this.traverseAlg(conjugate.B, newOptions),\n    );\n  }\n\n  public *traversePause(\n    pause: Pause,\n    _options: SimplifyOptions,\n  ): Generator<Unit> {\n    yield pause;\n  }\n\n  public *traverseNewline(\n    newline: Newline,\n    _options: SimplifyOptions,\n  ): Generator<Unit> {\n    yield newline;\n  }\n\n  public *traverseLineComment(\n    comment: LineComment,\n    _options: SimplifyOptions,\n  ): Generator<Unit> {\n    yield comment;\n  }\n}\n\nconst simplifyInstance = new Simplify();\nexport const simplify = simplifyInstance.traverseAlg.bind(simplifyInstance) as (\n  alg: Alg,\n  options: SimplifyOptions,\n) => Generator<Unit>;\n", "import { AlgCommon, Comparable } from \"./common\";\nimport { experimentalIs, experimentalIsUnit } from \"./is\";\nimport { direct, IterationDirection, reverse } from \"./iteration\";\nimport { parseAlg } from \"./parse\";\nimport { simplify, SimplifyOptions } from \"./traversal\";\nimport { LineComment } from \"./units/leaves/LineComment\";\nimport { Move } from \"./units/leaves/Move\";\nimport { Newline } from \"./units/leaves/Newline\";\nimport type { LeafUnit, Unit } from \"./units/Unit\";\nimport { warnOnce } from \"./warnOnce\";\n\nexport type FlexibleAlgSource = string | Iterable<Unit> | Alg;\n\n// TODO: validate\nfunction toIterable(input?: FlexibleAlgSource): Iterable<Unit> {\n  if (!input) {\n    return [];\n  }\n\n  if (experimentalIs(input, Alg)) {\n    return (input as Alg).units();\n  }\n\n  if (typeof input === \"string\") {\n    return parseAlg(input).units(); // TODO: something more direct?\n  }\n\n  // const seq = inputUnits as Sequence;\n  // if (seq.type === \"sequence\" && seq.nestedUnits) {\n  //   throw new Error(\"unimplemented\");\n  //   // return seq.nestedUnits;\n  // }\n\n  const iter = input as Iterable<Unit>;\n  if (typeof iter[Symbol.iterator] === \"function\") {\n    return iter; // TODO: avoid allocations\n  }\n\n  throw \"Invalid unit\";\n}\n\n// Preserves the alg if it's already an `Alg`.\nexport function experimentalEnsureAlg(alg: FlexibleAlgSource): Alg {\n  if (experimentalIs(alg, Alg)) {\n    return alg as Alg;\n  }\n  return new Alg(alg);\n}\n\n/**\n * Alg is a class that encapsulated a structured alg. To create an alg from a string, use:\n *\n *     new Alg(\"R U R'\"); // Convenient\n *     Alg.fromString(dynamicString); // Recommended when handling dynamic input.\n *\n * Once you have an Alg, you can call methods to transform it:\n *\n *     new Alg(\"[[R: U], R U R2']\").expand().simplify().invert();\n *\n * To convert an Alg to a string, use .toString():\n *\n *     new Alg(\"R U F\").invert().toString();\n *\n * If you need to debug, you may also find it convenient to use .log():\n *\n *     if (alg.isIdentical(alg.invert())) {\n *       alg.log(\"A self-inverse!\")\n *     }\n *\n * For more information, see: {@link https://js.cubing.net/cubing/alg/}\n *\n */\nexport class Alg extends AlgCommon<Alg> {\n  // #debugString: string;\n  #units: Iterable<Unit>; // TODO: freeze?\n  constructor(alg?: FlexibleAlgSource) {\n    super();\n    this.#units = Array.from(toIterable(alg)); // TODO: can we avoid array-casting?\n    // this.#debugString = this.toString();\n\n    for (const unit of this.#units) {\n      if (!experimentalIsUnit(unit)) {\n        throw new Error(\"An alg can only contain units.\");\n      }\n    }\n  }\n\n  /**\n   * Checks whether this Alg is structurally identical to another Alg. This\n   * essentially means that they are written identically apart from whitespace.\n   *\n   *     const alg1 = new Alg(\"R U L'\");\n   *     const alg2 = new Alg(\"L U' R'\").invert();\n   *     // true\n   *     alg1.isIdentical(alg2);\n   *\n   *     // false\n   *     new Alg(\"[R, U]\").isIdentical(new Alg(\"R U R' U'\"));\n   *     // true\n   *     new Alg(\"[R, U]\").expand().isIdentical(new Alg(\"R U R' U'\"));\n   *\n   * Note that .isIdentical() efficiently compares algorithms, but mainly exists\n   * to help optimize code when the structure of an algorithm hasn't changed.\n   * There are many ways to write the \"same\" alg on most puzzles, but is\n   * *highly* recommended to avoid expanding two Alg instances to compare them,\n   * since that can easily slow your program to a crawl if someone inputs an alg\n   * containing a large repetition. In general, you should use `cubing/kpuzzle`\n   * to compare if two algs have the same effect on a puzzle.\n   *\n   * Also note that parser annotations are not take into account while comparing\n   * algs:\n   *\n   *     const alg = new Alg([new Move(\"R\"), new Move(\"U2\")]);\n   *     // true, even though one of the algs has parser annotations\n   *     alg.isIdentical(new Alg(\"R U2\"))\n   *\n   */\n  isIdentical(other: Comparable): boolean {\n    const otherAsAlg = other as Alg;\n    if (!other.is(Alg)) {\n      return false;\n    }\n\n    // TODO: avoid converting to array\n    const l1 = Array.from(this.#units);\n    const l2 = Array.from(otherAsAlg.#units);\n    if (l1.length !== l2.length) {\n      return false;\n    }\n    for (let i = 0; i < l1.length; i++) {\n      if (!l1[i].isIdentical(l2[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns the inverse of the given alg.\n   *\n   * Note that that this does not make any assumptions about what puzzle the alg\n   * is for. For example, U2 is its own inverse on a cube, but U2' has the same\n   * effect U3 (and not U2) on Megaminx:\n   *\n   *     // Outputs: R U2' L'\n   *     new Alg(\"L U2 R'\").invert().log();\n   */\n  invert(): Alg {\n    // TODO: Handle newLines and comments correctly\n    // TODO: Make more efficient.\n    return new Alg(reverse(Array.from(this.#units).map((u) => u.invert())));\n  }\n\n  /** @deprecated Use {@link Alg.expand} instead. */\n  *experimentalExpand(\n    iterDir: IterationDirection = IterationDirection.Forwards,\n    depth?: number,\n  ): Generator<LeafUnit> {\n    depth ??= Infinity;\n    for (const unit of direct(this.#units, iterDir)) {\n      yield* unit.experimentalExpand(iterDir, depth);\n    }\n  }\n\n  /**\n   * Expands all Grouping, Commutator, and Conjugate parts nested inside the\n   * alg.\n   *\n   *     // F R U R' U' F'\n   *     new Alg(\"[F: [R, U]]\").expand().log();\n   *\n   *     // F [R, U] F'\n   *     new Alg(\"[F: [R, U]]\").expand(({ depth: 1 }).log();\n   *\n   * Avoid calling this on a user-provided alg unless the user explicitly asks\n   * to see the expanded alg. Otherwise, it's easy to make your program freeze\n   * when someone passes in an alg like: (R U)10000000\n   *\n   * Generally, if you want to perform an operation on an entire alg, you'll\n   * want to use something based on the `Traversal` mechanism, like countMoves()\n   * from `cubing/notation`.\n   */\n  expand(options?: { depth?: number }): Alg {\n    return new Alg(\n      this.experimentalExpand(\n        IterationDirection.Forwards,\n        options?.depth ?? Infinity,\n      ),\n    );\n  }\n\n  /** @deprecated */\n  *experimentalLeafMoves(): Generator<Move> {\n    for (const leaf of this.experimentalExpand()) {\n      if (leaf.is(Move)) {\n        yield leaf as Move;\n      }\n    }\n  }\n\n  concat(input: FlexibleAlgSource): Alg {\n    return new Alg(\n      Array.from(this.#units).concat(Array.from(toIterable(input))),\n    );\n  }\n\n  /** @deprecated */\n  experimentalIsEmpty(): boolean {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const _ of this.#units) {\n      return false;\n    }\n    return true;\n  }\n\n  static fromString(s: string): Alg {\n    return parseAlg(s);\n  }\n\n  *units(): Generator<Unit> {\n    for (const unit of this.#units) {\n      yield unit;\n    }\n  }\n\n  experimentalNumUnits(): number {\n    return Array.from(this.#units).length;\n  }\n\n  /** @deprecated */\n  get type(): string {\n    warnOnce(\"deprecated: type\");\n    return \"sequence\";\n  }\n\n  // toJSON(): AlgJSON {\n  //   return {\n  //     type: \"alg\",\n  //     units: Array.from(this.#units) as UnitJSON[],\n  //   };\n  // }\n\n  /**\n   * Converts the Alg to a string:\n   *\n   *     const alg = new Alg([new Move(\"R\"), new Move(\"U2\"), new Move(\"L\")])\n   *     // R U2 L\n   *     console.log(alg.toString())\n   */\n  toString(): string {\n    let output = \"\";\n    let previousUnit: Unit | null = null;\n    for (const unit of this.#units) {\n      if (previousUnit) {\n        output += spaceBetween(previousUnit, unit);\n        // console.log(\"l\", previousUnit.toString(), unit.toString(), output);\n      }\n      output += unit.toString();\n      previousUnit = unit;\n    }\n    return output;\n  }\n\n  // *experimentalExpand(options: ExperimentalExpandOptions): Generator<Unit> {\n  //   // if (options.depth === 0) {\n  //   //   yield* this.units();\n  //   //   return;\n  //   // }\n  //   // const newOptions = {\n  //   //   depth: options.depth ? options.depth - 1 : null,\n  //   // }; // TODO: avoid allocations?\n  //   // for (const unit of this.#units) {\n  //   //   yield* unit.experimentalExpandIntoAlg(newOptions);\n  //   // }\n  // }\n\n  simplify(options?: SimplifyOptions): Alg {\n    return new Alg(simplify(this, options ?? {}));\n  }\n}\n\nfunction spaceBetween(u1: Unit, u2: Unit): string {\n  if (u1.is(Newline) || u2.is(Newline)) {\n    return \"\";\n  }\n  if (u1.is(LineComment) && !u2.is(Newline)) {\n    return \"\\n\"; /// TODO\n  }\n  return \" \";\n}\n", "// tslint:disable-next-line no-namespace // TODO: nested module\n\nimport { Alg } from \"./Alg\";\nimport { Grouping } from \"./units\";\nimport { Commutator } from \"./units/containers/Commutator\";\nimport { Conjugate } from \"./units/containers/Conjugate\";\nimport { Move } from \"./units/leaves/Move\";\nimport { Pause } from \"./units/leaves/Pause\";\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport const Example = {\n  Sune: new Alg([\n    new Move(\"R\", 1),\n    new Move(\"U\", 1),\n    new Move(\"R\", -1),\n    new Move(\"U\", 1),\n    new Move(\"R\", 1),\n    new Move(\"U\", -2),\n    new Move(\"R\", -1),\n  ]),\n\n  AntiSune: new Alg([\n    new Move(\"R\", 1),\n    new Move(\"U\", 2),\n    new Move(\"R\", -1),\n    new Move(\"U\", -1),\n    new Move(\"R\", 1),\n    new Move(\"U\", -1),\n    new Move(\"R\", -1),\n  ]),\n\n  SuneCommutator: new Alg([\n    new Commutator(\n      new Alg([new Move(\"R\", 1), new Move(\"U\", 1), new Move(\"R\", -2)]),\n      new Alg([\n        new Conjugate(new Alg([new Move(\"R\", 1)]), new Alg([new Move(\"U\", 1)])),\n      ]),\n    ),\n  ]),\n\n  Niklas: new Alg([\n    new Move(\"R\", 1),\n    new Move(\"U\", -1),\n    new Move(\"L\", -1),\n    new Move(\"U\", 1),\n    new Move(\"R\", -1),\n    new Move(\"U\", -1),\n    new Move(\"L\", 1),\n    new Move(\"U\", 1),\n  ]),\n\n  EPerm: new Alg([\n    new Move(\"x\", -1),\n    new Commutator(\n      new Alg([\n        new Conjugate(\n          new Alg([new Move(\"R\", 1)]),\n          new Alg([new Move(\"U\", -1)]),\n        ),\n      ]),\n      new Alg([new Move(\"D\", 1)]),\n    ),\n    new Commutator(\n      new Alg([\n        new Conjugate(new Alg([new Move(\"R\", 1)]), new Alg([new Move(\"U\", 1)])),\n      ]),\n      new Alg([new Move(\"D\", 1)]),\n    ),\n    new Move(\"x\", 1),\n  ]),\n\n  FURURFCompact: new Alg([\n    new Conjugate(\n      new Alg([new Move(\"F\", 1)]),\n      new Alg([\n        new Commutator(\n          new Alg([new Move(\"U\", 1)]),\n          new Alg([new Move(\"R\", 1)]),\n        ),\n      ]),\n    ),\n  ]),\n\n  APermCompact: new Alg([\n    new Conjugate(\n      new Alg([new Move(\"R\", 2)]),\n      new Alg([\n        new Commutator(\n          new Alg([new Move(\"F\", 2)]),\n          new Alg([new Move(\"R\", -1), new Move(\"B\", -1), new Move(\"R\", 1)]),\n        ),\n      ]),\n    ),\n  ]),\n\n  FURURFMoves: new Alg([\n    new Move(\"F\", 1),\n    new Move(\"U\", 1),\n    new Move(\"R\", 1),\n    new Move(\"U\", -1),\n    new Move(\"R\", -1),\n    new Move(\"F\", -1),\n  ]),\n\n  TPerm: new Alg([\n    new Move(\"R\", 1),\n    new Move(\"U\", 1),\n    new Move(\"R\", -1),\n    new Move(\"U\", -1),\n    new Move(\"R\", -1),\n    new Move(\"F\", 1),\n    new Move(\"R\", 2),\n    new Move(\"U\", -1),\n    new Move(\"R\", -1),\n    new Move(\"U\", -1),\n    new Move(\"R\", 1),\n    new Move(\"U\", 1),\n    new Move(\"R\", -1),\n    new Move(\"F\", -1),\n  ]),\n\n  HeadlightSwaps: new Alg([\n    new Conjugate(\n      new Alg([new Move(\"F\", 1)]),\n      new Alg([\n        new Grouping(\n          new Alg([\n            new Commutator(\n              new Alg([new Move(\"R\", 1)]),\n              new Alg([new Move(\"U\", 1)]),\n            ),\n          ]),\n          3,\n        ),\n      ]),\n    ),\n  ]),\n\n  TriplePause: new Alg([new Pause(), new Pause(), new Pause()]),\n\n  // AllAlgParts: [\n  //   new Alg([new Move(\"R\", 1), new Move(\"U\", -1)]),\n  //   new Grouping(new Alg([new Move(\"F\", 1)]), 2),\n  //   // new Rotation(\"y\", -1),\n  //   new Move(\"R\", 2),\n  //   new Commutator(new Alg([new Move(\"R\", 2)]), new Alg([new Move(\"U\", 2)]), 2),\n  //   new Conjugate(new Alg([new Move(\"L\", 2)]), new Alg([new Move(\"D\", -1)]), 2),\n  //   new Pause(),\n  //   new Newline(),\n  //   new LineComment(\"line comment\"),\n  // ],\n};\n", "import { Move } from \"./units/leaves/Move\";\n\nconst cubeKeyMapping: { [key: number]: Move } = {\n  73: new Move(\"R\"),\n  75: new Move(\"R'\"),\n  87: new Move(\"B\"),\n  79: new Move(\"B'\"),\n  83: new Move(\"D\"),\n  76: new Move(\"D'\"),\n  68: new Move(\"L\"),\n  69: new Move(\"L'\"),\n  74: new Move(\"U\"),\n  70: new Move(\"U'\"),\n  72: new Move(\"F\"),\n  71: new Move(\"F'\"),\n\n  78: new Move(\"x'\"),\n  67: new Move(\"l\"),\n  82: new Move(\"l'\"),\n  85: new Move(\"r\"),\n  77: new Move(\"r'\"),\n\n  88: new Move(\"d\"),\n  188: new Move(\"d'\"),\n\n  84: new Move(\"x\"),\n  89: new Move(\"x\"),\n  66: new Move(\"x'\"),\n  186: new Move(\"y\"),\n  59: new Move(\"y\"),\n  65: new Move(\"y'\"), // 186 is WebKit, 59 is Mozilla; see http://unixpapa.com/js/key.html\n  80: new Move(\"z\"),\n  81: new Move(\"z'\"),\n\n  90: new Move(\"M'\"),\n  190: new Move(\"M'\"),\n};\n\n// TODO: options about whether to ignore modifier keys (e.g. alt, ctrl).\n// TODO: Support different mappings.\n// TODO: Return BaseMove instead?\nexport function keyToMove(e: KeyboardEvent): Move | null {\n  if (e.altKey || e.ctrlKey) {\n    return null;\n  }\n\n  return cubeKeyMapping[e.keyCode] || null;\n}\n", "import type { Alg } from \"./Alg\";\n\n// This is not the most sophisticated scheme, but it has been used in production\n// at alg.cubing.net for years.\nfunction serializeURLParam(a: Alg): string {\n  let escaped = a.toString();\n  escaped = escaped.replace(/_/g, \"&#95;\").replace(/ /g, \"_\");\n  escaped = escaped.replace(/\\+/g, \"&#2b;\");\n  escaped = escaped.replace(/-/g, \"&#45;\").replace(/'/g, \"-\");\n  return escaped;\n}\n\nexport interface AlgCubingNetOptions {\n  alg?: Alg;\n  setup?: Alg;\n  title?: string;\n  puzzle?:\n    | \"1x1x1\"\n    | \"2x2x2\"\n    | \"3x3x3\"\n    | \"4x4x4\"\n    | \"5x5x5\"\n    | \"6x6x6\"\n    | \"7x7x7\"\n    | \"8x8x8\"\n    | \"9x9x9\"\n    | \"10x10x10\"\n    | \"11x11x11\"\n    | \"12x12x12\"\n    | \"13x13x13\"\n    | \"14x14x14\"\n    | \"16x16x16\"\n    | \"17x17x17\";\n  stage?:\n    | \"full\"\n    | \"cross\"\n    | \"F2L\"\n    | \"LL\"\n    | \"OLL\"\n    | \"PLL\"\n    | \"CLS\"\n    | \"ELS\"\n    | \"L6E\"\n    | \"CMLL\"\n    | \"WV\"\n    | \"ZBLL\"\n    | \"void\";\n  view?: \"editor\" | \"playback\" | \"fullscreen\";\n  type?: \"moves\" | \"reconstruction\" | \"alg\" | \"reconstruction-end-with-setup\";\n}\n\n// TODO: runtime validation?\nexport function algCubingNetLink(options: AlgCubingNetOptions): string {\n  const url = new URL(\"https://alg.cubing.net\");\n  if (!options.alg) {\n    throw new Error(\"An alg parameter is required.\");\n  }\n  url.searchParams.set(\"alg\", serializeURLParam(options.alg));\n\n  if (options.setup) {\n    url.searchParams.set(\"setup\", serializeURLParam(options.setup));\n  }\n  if (options.title) {\n    url.searchParams.set(\"title\", options.title);\n  }\n  if (options.puzzle) {\n    if (\n      ![\n        \"1x1x1\",\n        \"2x2x2\",\n        \"3x3x3\",\n        \"4x4x4\",\n        \"5x5x5\",\n        \"6x6x6\",\n        \"7x7x7\",\n        \"8x8x8\",\n        \"9x9x9\",\n        \"10x10x10\",\n        \"11x11x11\",\n        \"12x12x12\",\n        \"13x13x13\",\n        \"14x14x14\",\n        \"16x16x16\",\n        \"17x17x17\",\n      ].includes(options.puzzle)\n    ) {\n      throw new Error(`Invalid puzzle parameter: ${options.puzzle}`);\n    }\n    url.searchParams.set(\"puzzle\", options.puzzle);\n  }\n  if (options.stage) {\n    if (\n      ![\n        \"full\",\n        \"cross\",\n        \"F2L\",\n        \"LL\",\n        \"OLL\",\n        \"PLL\",\n        \"CLS\",\n        \"ELS\",\n        \"L6E\",\n        \"CMLL\",\n        \"WV\",\n        \"ZBLL\",\n        \"void\",\n      ].includes(options.stage)\n    ) {\n      throw new Error(`Invalid stage parameter: ${options.stage}`);\n    }\n    url.searchParams.set(\"stage\", options.stage);\n  }\n  if (options.view) {\n    if (![\"editor\", \"playback\", \"fullscreen\"].includes(options.view)) {\n      throw new Error(`Invalid view parameter: ${options.view}`);\n    }\n    url.searchParams.set(\"view\", options.view);\n  }\n  if (options.type) {\n    if (\n      ![\n        \"moves\",\n        \"reconstruction\",\n        \"alg\",\n        \"reconstruction-end-with-setup\",\n      ].includes(options.type)\n    ) {\n      throw new Error(`Invalid type parameter: ${options.type}`);\n    }\n    url.searchParams.set(\"type\", options.type);\n  }\n  return url.toString();\n}\n", "import { Alg } from \"./Alg\";\nimport type { Move } from \"./units/leaves/Move\";\n\nexport function experimentalAppendMove(\n  alg: Alg,\n  newMove: Move,\n  options?: {\n    coalesce?: boolean; // defaults to false\n    mod?: number;\n  },\n): Alg {\n  const oldUnits = Array.from(alg.units());\n  const oldLastMove = oldUnits[oldUnits.length - 1] as Move | undefined;\n  if (\n    options?.coalesce &&\n    oldLastMove &&\n    oldLastMove.quantum &&\n    oldLastMove.quantum.isIdentical(newMove.quantum)\n  ) {\n    const newUnits = oldUnits.slice(0, oldUnits.length - 1);\n    let newAmount = oldLastMove.amount + newMove.amount;\n    const mod = options?.mod;\n    if (mod) {\n      newAmount = ((newAmount % mod) + mod) % mod;\n      if (newAmount * 2 > mod) {\n        newAmount -= mod;\n      }\n    }\n    if (newAmount !== 0) {\n      newUnits.push(oldLastMove.modified({ amount: newAmount }));\n    }\n    return new Alg(newUnits);\n  } else {\n    return new Alg([...oldUnits, newMove]);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
