{
  "version": 3,
  "sources": ["../../src/cubing/search/inside/solve/puzzles/skewb.sgs.json.ts"],
  "sourcesContent": ["import { KPuzzle } from \"../../../../kpuzzle\";\nimport {\n  getPuzzleGeometryByName,\n  ExperimentalPGNotation,\n} from \"../../../../puzzle-geometry\";\nimport { parseSGS, SGSCachedData } from \"../parseSGS\";\n\nasync function skewbKPuzzleWithoutMO(): Promise<KPuzzle> {\n  const pg = getPuzzleGeometryByName(\"skewb\", {\n    allMoves: true,\n    addRotations: true,\n  });\n  return new KPuzzle(pg.getKPuzzleDefinition(true), {\n    experimentalPGNotation: new ExperimentalPGNotation(\n      pg,\n      pg.getOrbitsDef(true),\n    ),\n  });\n}\n\n// TODO: Implement a general lazy Promise/ Promise cache wrapper\nlet defCache: Promise<KPuzzle> | null = null;\nexport async function skewbKPuzzleWithoutMOCached(): Promise<KPuzzle> {\n  return (defCache ??= skewbKPuzzleWithoutMO());\n}\n\nlet cachedData: Promise<SGSCachedData> | null = null;\nexport async function sgsDataSkewb() {\n  return (cachedData ??= uncachedSGSDataSkewb());\n}\n\nexport async function sgsDataSkewbFixedCorner(): Promise<SGSCachedData> {\n  return {\n    ordering: (await sgsDataSkewb()).ordering.slice(1),\n  };\n}\n\n// TODO: Reduce info.\nasync function uncachedSGSDataSkewb(): Promise<SGSCachedData> {\n  return parseSGS(\n    await skewbKPuzzleWithoutMOCached(),\n    `SubgroupSizes 24 6 5 12 9 3 4 9 3 3\n\nAlg y\nAlg y2\nAlg y'\nAlg F\nAlg F'\nAlg y U\nAlg y U'\nAlg y L\nAlg y L'\nAlg y F\nAlg y F'\nAlg y2 U\nAlg y2 U'\nAlg y2 B\nAlg y2 B'\nAlg y' U\nAlg y' F'\nAlg y U L'\nAlg y U B\nAlg y2 U B\nAlg y2 U B'\nAlg y2 U' B\nAlg y2 U' B'\n\nAlg U\nAlg U'\nAlg U L\nAlg U L'\nAlg U' R'\n\nAlg R\nAlg R'\nAlg R B\nAlg R' L'\n\nAlg U B' U\nAlg U' L U\nAlg U' L' U\nAlg U' B U'\nAlg R L R'\nAlg R B' R\nAlg U B L U'\nAlg U B' U B'\nAlg U B' L' U\nAlg U' L B U'\nAlg R' B L' R'\n\nAlg L\nAlg L'\nAlg L B\nAlg L B'\nAlg L B L\nAlg L B L'\nAlg L B' L\nAlg L B' L'\n\nAlg B\nAlg B'\n\nAlg L' B L\nAlg L' B' L\nAlg R' L' B L R\n\nAlg B L' B L B'\nAlg B L' B' L B'\nAlg U L U B U' L' U'\nAlg R L R' B' R L' R'\nAlg U B' R L R' B' U B\nAlg U' B U L U' B' U L'\nAlg L U' B U L' U' B' U\nAlg R B' U R B L U' B\n\nAlg U L U' B' U L' U' B\nAlg U' B L U L B' U' L'\n\nAlg U R' U' L B R' B' R\nAlg R' U' R U B' U' B L`,\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;AAOA,uCAAyD;AACvD,QAAM,KAAK,wBAAwB,SAAS;AAAA,IAC1C,UAAU;AAAA,IACV,cAAc;AAAA;AAEhB,SAAO,IAAI,QAAQ,GAAG,qBAAqB,OAAO;AAAA,IAChD,wBAAwB,IAAI,WAC1B,IACA,GAAG,aAAa;AAAA;AAAA;AAMtB,IAAI,WAAoC;AACxC,6CAAsE;AACpE,SAAQ,wBAAa;AAAA;AAGvB,IAAI,aAA4C;AAChD,8BAAqC;AACnC,SAAQ,4BAAe;AAAA;AAGzB,yCAAwE;AACtE,SAAO;AAAA,IACL,UAAW,OAAM,gBAAgB,SAAS,MAAM;AAAA;AAAA;AAKpD,sCAA8D;AAC5D,SAAO,SACL,MAAM,+BACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
