{
  "version": 3,
  "sources": ["../../src/cubing/vendor/comlink-everywhere/node-adapter.ts"],
  "sourcesContent": ["import type { Worker as NodeWorker } from \"worker_threads\";\n\n/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ntype EventHandler = EventListenerObject | ((event: any) => void);\n\nfunction nodeEndpoint(nep: NodeWorker): Worker & {\n  nodeWorker?: import(\"worker_threads\").Worker;\n} {\n  const listeners = new WeakMap();\n  return {\n    postMessage: nep.postMessage.bind(nep),\n    addEventListener: (_: string, eh: EventHandler) => {\n      const l = (data: Event) => {\n        if (\"handleEvent\" in eh) {\n          eh.handleEvent({ data } as any);\n        } else {\n          eh({ data });\n        }\n      };\n      nep.on(\"message\", l);\n      listeners.set(eh, l);\n    },\n    removeEventListener: (_: string, eh: EventHandler) => {\n      const l = listeners.get(eh);\n      if (!l) {\n        return;\n      }\n      nep.off(\"message\", l);\n      listeners.delete(eh);\n    },\n    nodeWorker: nep,\n    // start: nep.start && nep.start.bind(nep),\n  } as Worker & {\n    nodeWorker?: import(\"worker_threads\").Worker;\n  };\n}\n\nexport default nodeEndpoint;\n//# sourceMappingURL=node-adapter.mjs.map\n"],
  "mappings": ";AAiBA,sBAAsB,KAEpB;AACA,QAAM,YAAY,oBAAI;AACtB,SAAO;AAAA,IACL,aAAa,IAAI,YAAY,KAAK;AAAA,IAClC,kBAAkB,CAAC,GAAW,OAAqB;AACjD,YAAM,IAAI,CAAC,SAAgB;AACzB,YAAI,iBAAiB,IAAI;AACvB,aAAG,YAAY,EAAE;AAAA,eACZ;AACL,aAAG,EAAE;AAAA;AAAA;AAGT,UAAI,GAAG,WAAW;AAClB,gBAAU,IAAI,IAAI;AAAA;AAAA,IAEpB,qBAAqB,CAAC,GAAW,OAAqB;AACpD,YAAM,IAAI,UAAU,IAAI;AACxB,UAAI,CAAC,GAAG;AACN;AAAA;AAEF,UAAI,IAAI,WAAW;AACnB,gBAAU,OAAO;AAAA;AAAA,IAEnB,YAAY;AAAA;AAAA;AAOhB,IAAO,uBAAQ;",
  "names": []
}
