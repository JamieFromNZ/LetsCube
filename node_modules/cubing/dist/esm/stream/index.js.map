{
  "version": 3,
  "sources": ["../../../src/cubing/stream/websocket-proxy.ts", "../../../src/cubing/stream/twizzle/TwizzleStream.ts"],
  "sourcesContent": ["import type { MoveEvent, OrientationEvent } from \"../bluetooth\";\nimport type { ProxyEvent } from \"./proxy-event\";\n\nexport class WebSocketProxySender {\n  protected websocket: WebSocket;\n  constructor(url: string) {\n    this.websocket = new WebSocket(url);\n    this.websocket.onopen = this.onopen.bind(this);\n    this.websocket.onerror = this.onerror.bind(this);\n    this.websocket.onmessage = this.onmessage.bind(this);\n  }\n\n  public sendMoveEvent(e: MoveEvent): void {\n    this.sendProxyEvent({\n      event: \"move\",\n      data: e,\n    });\n  }\n\n  public sendOrientationEvent(e: OrientationEvent): void {\n    this.sendProxyEvent({\n      event: \"orientation\",\n      data: e,\n    });\n  }\n\n  public sendResetEvent(): void {\n    this.sendProxyEvent({ event: \"reset\" });\n  }\n\n  protected sendProxyEvent(proxyEvent: ProxyEvent): void {\n    this.websocket.send(JSON.stringify(proxyEvent));\n  }\n\n  protected onopen(): void {\n    console.log(\"Sending socket is open!\");\n  }\n\n  protected onerror(error: Error): void {\n    console.error(\"WebSocket sender error:\", error);\n  }\n\n  protected onmessage(_e: MessageEvent): void {}\n}\n\nexport abstract class WebSocketProxyReceiver {\n  protected websocket: WebSocket;\n  constructor(url: string, socketOrigin?: string) {\n    if (!socketOrigin) {\n      console.log(\"No socket origin specified. Will not attempt to connect.\");\n      return;\n    }\n    this.websocket = new WebSocket(url);\n    console.log(this.websocket);\n    this.websocket.onopen = this.onopen.bind(this);\n    this.websocket.onerror = this.onerror.bind(this);\n    this.websocket.onmessage = this.onmessage.bind(this);\n  }\n\n  protected onopen(): void {\n    console.log(\"Receiving socket is open!\");\n  }\n\n  protected onerror(error: Error): void {\n    console.error(\"WebSocket receiver error:\", error);\n  }\n\n  protected onmessage(e: MessageEvent): void {\n    this.onProxyEvent(JSON.parse(e.data));\n  }\n\n  abstract onProxyEvent(e: ProxyEvent): void;\n}\n", "import { Move, QuantumMove } from \"../../alg\";\nimport type { StreamMessageEvent } from \"./stream-types\";\n\nclass TwizzleStream extends EventTarget {\n  socket: WebSocket;\n  constructor(url: string) {\n    super();\n    this.socket = new WebSocket(url);\n    this.socket.onmessage = this.onMessage.bind(this); // TODO: Can we \"add a listener instead\"?\n  }\n\n  onMessage(msg: MessageEvent): void {\n    try {\n      const json: StreamMessageEvent = JSON.parse(msg.data);\n      if (json.event === \"move\") {\n        const move = json.data.latestMove;\n        if (move.type !== \"blockMove\") {\n          throw new Error(\"Invalid move!\");\n        }\n        this.dispatchEvent(\n          new CustomEvent(\"move\", {\n            detail: {\n              move: new Move(new QuantumMove(move.family), move.amount),\n            },\n          }),\n        );\n      }\n    } catch (e) {\n      console.error(\"Could not handle message:\", e);\n    }\n  }\n}\n\ntype StreamsField = {\n  streamID: string;\n  senders: { name: string; twizzleUserID: string; wcaID: string | null }[];\n}[];\n\nexport class TwizzleStreamServer {\n  async streams(): Promise<StreamsField> {\n    return (\n      (await (await fetch(\"https://api.twizzle.net/v0/streams\")).json()) as {\n        streams: StreamsField;\n      }\n    ).streams;\n  }\n\n  connect(streamID: string): TwizzleStream {\n    return new TwizzleStream(\n      `wss://api.twizzle.net/v0/streams/${streamID}/socket`,\n    );\n  }\n}\n"],
  "mappings": ";;;;;;;AAGO,iCAA2B;AAAA,EAEhC,YAAY,KAAa;AACvB,SAAK,YAAY,IAAI,UAAU;AAC/B,SAAK,UAAU,SAAS,KAAK,OAAO,KAAK;AACzC,SAAK,UAAU,UAAU,KAAK,QAAQ,KAAK;AAC3C,SAAK,UAAU,YAAY,KAAK,UAAU,KAAK;AAAA;AAAA,EAG1C,cAAc,GAAoB;AACvC,SAAK,eAAe;AAAA,MAClB,OAAO;AAAA,MACP,MAAM;AAAA;AAAA;AAAA,EAIH,qBAAqB,GAA2B;AACrD,SAAK,eAAe;AAAA,MAClB,OAAO;AAAA,MACP,MAAM;AAAA;AAAA;AAAA,EAIH,iBAAuB;AAC5B,SAAK,eAAe,EAAE,OAAO;AAAA;AAAA,EAGrB,eAAe,YAA8B;AACrD,SAAK,UAAU,KAAK,KAAK,UAAU;AAAA;AAAA,EAG3B,SAAe;AACvB,YAAQ,IAAI;AAAA;AAAA,EAGJ,QAAQ,OAAoB;AACpC,YAAQ,MAAM,2BAA2B;AAAA;AAAA,EAGjC,UAAU,IAAwB;AAAA;AAAA;AAGvC,mCAAsC;AAAA,EAE3C,YAAY,KAAa,cAAuB;AAC9C,QAAI,CAAC,cAAc;AACjB,cAAQ,IAAI;AACZ;AAAA;AAEF,SAAK,YAAY,IAAI,UAAU;AAC/B,YAAQ,IAAI,KAAK;AACjB,SAAK,UAAU,SAAS,KAAK,OAAO,KAAK;AACzC,SAAK,UAAU,UAAU,KAAK,QAAQ,KAAK;AAC3C,SAAK,UAAU,YAAY,KAAK,UAAU,KAAK;AAAA;AAAA,EAGvC,SAAe;AACvB,YAAQ,IAAI;AAAA;AAAA,EAGJ,QAAQ,OAAoB;AACpC,YAAQ,MAAM,6BAA6B;AAAA;AAAA,EAGnC,UAAU,GAAuB;AACzC,SAAK,aAAa,KAAK,MAAM,EAAE;AAAA;AAAA;;;ACjEnC,kCAA4B,YAAY;AAAA,EAEtC,YAAY,KAAa;AACvB;AACA,SAAK,SAAS,IAAI,UAAU;AAC5B,SAAK,OAAO,YAAY,KAAK,UAAU,KAAK;AAAA;AAAA,EAG9C,UAAU,KAAyB;AACjC,QAAI;AACF,YAAM,OAA2B,KAAK,MAAM,IAAI;AAChD,UAAI,KAAK,UAAU,QAAQ;AACzB,cAAM,OAAO,KAAK,KAAK;AACvB,YAAI,KAAK,SAAS,aAAa;AAC7B,gBAAM,IAAI,MAAM;AAAA;AAElB,aAAK,cACH,IAAI,YAAY,QAAQ;AAAA,UACtB,QAAQ;AAAA,YACN,MAAM,IAAI,KAAK,IAAI,YAAY,KAAK,SAAS,KAAK;AAAA;AAAA;AAAA;AAAA,aAKnD,GAAP;AACA,cAAQ,MAAM,6BAA6B;AAAA;AAAA;AAAA;AAU1C,gCAA0B;AAAA,QACzB,UAAiC;AACrC,WACG,OAAO,OAAM,MAAM,uCAAuC,QAG3D;AAAA;AAAA,EAGJ,QAAQ,UAAiC;AACvC,WAAO,IAAI,cACT,oCAAoC;AAAA;AAAA;",
  "names": []
}
